# HG changeset patch
# User David Meyer <pdox@google.com>
# Date 1306973291 25200
# Branch pnacl-sfi
# Node ID 0d3856fc6b19c070f408d5e6a36d89ff180a2141
# Parent 07355f95b317e183a801fdfadb1343224f3ffb34
Add flag -add-nacl-read-tp-dependency to LLVM

 From pnacl-llvm-0039-263-0d3856fc6b19c070f408d5e6a36d89ff180a2141.patch

diff -r 07355f95b317 include/llvm-c/lto.h
--- a/include/llvm-c/lto.h	Tue May 31 12:33:49 2011 -0700
+++ b/include/llvm-c/lto.h	Fri Jul 29 14:32:36 2011 -0700
@@ -64,6 +64,17 @@
 extern "C" {
 #endif
 
+
+/* @LOCALMOD-BEGIN */
+
+/* Add a command-line option */
+void lto_add_command_line_option(const char* opt);
+
+/* Parse command line options */
+void lto_parse_command_line_options();
+
+/* @LOCALMOD-END */
+
 /**
  * Returns a printable string.
  */
diff -r 07355f95b317 lib/CodeGen/IntrinsicLowering.cpp
--- a/lib/CodeGen/IntrinsicLowering.cpp	Tue May 31 12:33:49 2011 -0700
+++ b/lib/CodeGen/IntrinsicLowering.cpp	Fri Jul 29 14:32:36 2011 -0700
@@ -17,6 +17,7 @@
 #include "llvm/Type.h"
 #include "llvm/CodeGen/IntrinsicLowering.h"
 #include "llvm/Support/CallSite.h"
+#include "llvm/Support/CommandLine.h" // @LOCALMOD
 #include "llvm/Support/ErrorHandling.h"
 #include "llvm/Support/IRBuilder.h"
 #include "llvm/Support/raw_ostream.h"
@@ -24,6 +25,14 @@
 #include "llvm/ADT/SmallVector.h"
 using namespace llvm;
 
+// @LOCALMOD-BEGIN
+static cl::opt<bool>
+  AddNaClReadTPDep("add-nacl-read-tp-dependency",
+                 cl::desc("Add __nacl_read_tp dependency to bitcode modules"),
+                 cl::init(false));
+
+// @LOCALMOD-END
+
 template <class ArgIt>
 static void EnsureFunctionExists(Module &M, const char *Name,
                                  ArgIt ArgBegin, ArgIt ArgEnd,
@@ -124,11 +133,11 @@
   LLVMContext &Context = M.getContext();
 
   // @LOCALMOD-BEGIN
-  // It's not easy to determine from the bitcode module exactly when
-  // __nacl_read_tp will be generated. To be safe, always
-  // assert that __nacl_read_tp exists.
-  // Insert a correctly-typed definition now.
-  {
+  // Calls to __nacl_read_tp may be generated by codegen on X86-64
+  // in non-PIC TLS mode. Since __nacl_read_tp exists in a bitcode
+  // archive, it is necessary to add a dependency to it during
+  // bitcode linking, so that it gets included in the link.
+  if (AddNaClReadTPDep) {
     const Type *RetTy = Type::getInt8PtrTy(M.getContext());
     M.getOrInsertFunction("__nacl_read_tp", RetTy, (Type*)0);
   }
diff -r 07355f95b317 tools/gold/gold-plugin.cpp
--- a/tools/gold/gold-plugin.cpp	Tue May 31 12:33:49 2011 -0700
+++ b/tools/gold/gold-plugin.cpp	Fri Jul 29 14:32:36 2011 -0700
@@ -222,6 +222,24 @@
     return LDPS_ERR;
   }
 
+  // @LOCALMOD-BEGIN
+  // Parse extra command-line options
+  // Although lto_codegen provides a way to parse command-line arguments,
+  // we need the arguments to be parsed and applied before LTOModules are
+  // even created. In particular, this is needed because the
+  // "-add-nacl-read-tp-dependency" flag affects how modules are created.
+  if (!options::extra.empty()) {
+    for (std::vector<std::string>::iterator it = options::extra.begin();
+         it != options::extra.end(); ++it) {
+      lto_add_command_line_option((*it).c_str());
+    }
+    lto_parse_command_line_options();
+    // We clear the options so that they don't get parsed again in
+    // lto_codegen_debug_options.
+    options::extra.clear();
+  }
+  // @LOCALMOD-END
+
   return LDPS_OK;
 }
 
@@ -375,6 +393,11 @@
   if (!options::mcpu.empty())
     lto_codegen_set_cpu(code_gen, options::mcpu.c_str());
 
+  // @LOCALMOD-BEGIN (COMMENT)
+  // "extra" will always be empty below, because we process the extra
+  // options earlier, at the end of onload().
+  // @LOCALMOD-END
+
   // Pass through extra options to the code generator.
   if (!options::extra.empty()) {
     for (std::vector<std::string>::iterator it = options::extra.begin();
diff -r 07355f95b317 tools/lto/lto.cpp
--- a/tools/lto/lto.cpp	Tue May 31 12:33:49 2011 -0700
+++ b/tools/lto/lto.cpp	Fri Jul 29 14:32:36 2011 -0700
@@ -15,6 +15,8 @@
 #include "llvm-c/lto.h"
 #include "llvm-c/Core.h"
 
+#include "llvm/Support/CommandLine.h" // @LOCALMOD
+
 #include "LTOModule.h"
 #include "LTOCodeGenerator.h"
 
@@ -23,7 +25,25 @@
 // *** not thread safe ***
 static std::string sLastErrorString;
 
+// @LOCALMOD-BEGIN
+static std::vector<const char*> lto_options;
 
+extern void lto_add_command_line_option(const char* opt)
+{
+  // ParseCommandLineOptions() expects argv[0] to be program name.
+  if (lto_options.empty())
+    lto_options.push_back("libLTO");
+
+  lto_options.push_back(strdup(opt));
+}
+
+extern void lto_parse_command_line_options()
+{
+  if ( !lto_options.empty() )
+      llvm::cl::ParseCommandLineOptions(lto_options.size(),
+                                        const_cast<char **>(&lto_options[0]));
+}
+// @LOCALMOD-END
 
 //
 // returns a printable string
diff -r 07355f95b317 tools/lto/lto.exports
--- a/tools/lto/lto.exports	Tue May 31 12:33:49 2011 -0700
+++ b/tools/lto/lto.exports	Fri Jul 29 14:32:36 2011 -0700
@@ -1,3 +1,5 @@
+lto_add_command_line_option
+lto_parse_command_line_options
 lto_get_error_message
 lto_get_version
 lto_module_create
