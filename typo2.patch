# HG changeset patch
# Parent 080436ead7c8e7f54f6700bb6897f07e1fc30ee2
# User Jason Kim <jasonwkim@google.com>
more typos

diff -r 080436ead7c8 lib/CodeGen/IntrinsicLowering.cpp
--- a/lib/CodeGen/IntrinsicLowering.cpp	Thu Aug 11 11:39:58 2011 -0700
+++ b/lib/CodeGen/IntrinsicLowering.cpp	Thu Aug 11 13:34:27 2011 -0700
@@ -216,8 +216,8 @@
   // archive, it is necessary to add a dependency to it during
   // bitcode linking, so that it gets included in the link.
   if (AddNaClReadTPDep) {
-    const Type *RetTy = Type::getInt8PtrTy(Context);
-    M.getOrInsertFunction("__nacl_read_tp", RetTy, (Type*)0);
+    Type *RetTy = Type::getInt8PtrTy(Context);
+    M.getOrInsertFunction(StringRef("__nacl_read_tp"), RetTy, (Type*)0);
   }
 
   // If we link libgcc we need to add a dependency to all its functions
@@ -234,20 +234,22 @@
     CharToTypeMap['d'] = Type::getInt64Ty(Context);
 
     for (unsigned i=0; LibgccIntrinsicNames[i].name; ++i) {
-      const Type *RetTy = 0;
-      std::vector<const Type *> ParamTys;
+      Type *RetTy = 0;
       const char* name = LibgccIntrinsicNames[i].name;
       const char* params = LibgccIntrinsicNames[i].types;
+      Type **ParmTys = new Type *[strlen(params)];
+      int p = 0;
       for (unsigned j=0; params[j]; ++j) {
-        const Type *Current = CharToTypeMap[params[j]];
+        const Type *Current = CharToTypeMap[(int) params[j]];
         assert (Current != 0);
         if (j == 0) {
-          RetTy = Current;
+          RetTy = const_cast<Type*>(Current);
         } else {
-          ParamTys.push_back(Current);
+          ParmTys[p++] = const_cast<Type*>(Current);
         }
       }
-      M.getOrInsertFunction(name, FunctionType::get(RetTy, ParamTys, false));
+      M.getOrInsertFunction(name, FunctionType::get(RetTy, ArrayRef<Type *> (ParmTys, p), false));
+      delete [] ParmTys;
     }
   }
   // @LOCALMOD-END
