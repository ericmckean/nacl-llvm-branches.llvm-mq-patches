# HG changeset patch
# User Jason Kim <jasonwkim@google.com>
# Date 1303412567 25200
# Branch pnacl-sfi
# Node ID 6960fea5debd1c1c8aac5f0af79c5551d677b091
# Parent abd6402366f9aadf59592e921c6add89b986e83b
Address the last bit of relocation flag related divergence betweeen
LLVM and binutils.

With this patch, there are no functional differences between the .o
produced directly from LLVM versus the .s to .o via GNU as, for relocation tags
at least, for both PIC and non-PIC modes.

However, for PIC mode, I added a new switch on the ELFObjectwriter
-arm-elf-force-pic which forces the objectwriter to pretend that all relocs
are for PIC mode. This is due to an incompatibility of how relocs are emitted in
the .rodata section. PIC likes to emit relocs as section relative offsets, where as
non-pic seems to be fine with

The only detected differences in the .o machine code are in the values encoded
for movt instructions, but it is most likely a pair of related bugs in GNU
as/ld for ARM that is making the code work on the .s to .o path but is subtly
incompatible with the LLVM generated .o files

The only other differences in the .o files have to do with NOPs.  The current
NOP used in LLVM is a mov r0, r0 but GNU as like to use the real nop
instruction. This issue will be addressed separately.

So far the only failing test on PIC mode is env_var_test
On non-pic everything passes.

BUG=http://code.google.com/p/nativeclient/issues/detail?id=1588
BUG=http://code.google.com/p/nativeclient/issues/detail?id=424
TEST=utman.sh test-arm
TEST=utman.sh test-arm-pic

 From llvm-pnacl-0024-248-6960fea5debd1c1c8aac5f0af79c5551d677b091.patch

 From .hg/patches/llvm-pnacl-0024-248-6960fea5debd1c1c8aac5f0af79c5551d677b091.patch.stripped

diff -r abd6402366f9 lib/MC/ELFObjectWriter.cpp
--- a/lib/MC/ELFObjectWriter.cpp	Fri Apr 15 18:11:24 2011 -0400
+++ b/lib/MC/ELFObjectWriter.cpp	Tue Aug 09 15:55:46 2011 -0700
@@ -27,6 +27,8 @@
 #include "llvm/Support/CommandLine.h"
 #include "llvm/ADT/Statistic.h"
 #include "llvm/ADT/StringSwitch.h"
+#include "llvm/Support/CommandLine.h"
+#include "llvm/ADT/Statistic.h"
 
 #include "../Target/X86/MCTargetDesc/X86FixupKinds.h"
 #include "../Target/ARM/MCTargetDesc/ARMFixupKinds.h"
@@ -38,6 +40,13 @@
 #undef  DEBUG_TYPE
 #define DEBUG_TYPE "reloc-info"
 
+// Emulate the wierd behavior of GNU-as for relocation types
+namespace llvm {
+cl::opt<bool>
+ForceARMElfPIC("arm-elf-force-pic", cl::Hidden, cl::init(false),
+               cl::desc("Force ELF emitter to emit PIC style relocations"));
+}
+
 bool ELFObjectWriter::isFixupKindPCRel(const MCAssembler &Asm, unsigned Kind) {
   const MCFixupKindInfo &FKI =
     Asm.getBackend().getFixupKindInfo((MCFixupKind) Kind);
@@ -387,7 +396,7 @@
       (Kind == MCSymbolRefExpr::VK_PLT ||
        Kind == MCSymbolRefExpr::VK_GOTPCREL ||
        Kind == MCSymbolRefExpr::VK_GOTOFF ||
-  // @LOCALMOD-BEGIN
+  // @LOCALMOD-BEGIN-IS-UPSTREAM
   // Fixes an LLVM bug. This bug has already been fixed upstream
   // and should disappear on the next merge.
        Kind == MCSymbolRefExpr::VK_NTPOFF)) {
@@ -1455,7 +1464,15 @@
       }
       break;
     case ARM::fixup_arm_condbranch:
-      Type = ELF::R_ARM_JUMP24;
+      // @LOCALMOD-UPSTREAM-TODO
+      switch (Modifier) {
+      case MCSymbolRefExpr::VK_ARM_PLT:
+        Type = ELF::R_ARM_PLT32;
+        break;
+      default:
+        Type = ELF::R_ARM_JUMP24;
+        break;
+      } // @LOCALMOD-END
       break;
     case ARM::fixup_arm_movt_hi16:
     case ARM::fixup_arm_movt_hi16_pcrel:
@@ -1833,8 +1850,5 @@
     }
   }
 
-  if (RelocNeedsGOT(Modifier))
-    NeedsGOT = true;
-
   return Type;
 }
diff -r abd6402366f9 lib/MC/ELFObjectWriter.h
--- a/lib/MC/ELFObjectWriter.h	Fri Apr 15 18:11:24 2011 -0400
+++ b/lib/MC/ELFObjectWriter.h	Tue Aug 09 15:55:46 2011 -0700
@@ -159,7 +159,7 @@
     bool hasRelocationAddend() const {
       return TargetObjectWriter->hasRelocationAddend();
     }
-
+    // @LOCALMOD-END
   public:
     ELFObjectWriter(MCELFObjectTargetWriter *MOTW,
                     raw_ostream &_OS, bool IsLittleEndian)
