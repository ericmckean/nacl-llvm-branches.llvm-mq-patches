# HG changeset patch
# User Jason Kim <jasonwkim@google.com>
# Date 1303412567 25200
# Branch pnacl-sfi
# Node ID 6960fea5debd1c1c8aac5f0af79c5551d677b091
# Parent 1143dbba8cd2c9fd9cd17ebb282660cd56a50167
Address the last bit of relocation flag related divergence betweeen
LLVM and binutils.

With this patch, there are no functional differences between the .o
produced directly from LLVM versus the .s to .o via GNU as, for relocation tags
at least, for both PIC and non-PIC modes.

However, for PIC mode, I added a new switch on the ELFObjectwriter
-arm-elf-force-pic which forces the objectwriter to pretend that all relocs
are for PIC mode. This is due to an incompatibility of how relocs are emitted in
the .rodata section. PIC likes to emit relocs as section relative offsets, where as
non-pic seems to be fine with

The only detected differences in the .o machine code are in the values encoded
for movt instructions, but it is most likely a pair of related bugs in GNU
as/ld for ARM that is making the code work on the .s to .o path but is subtly
incompatible with the LLVM generated .o files

The only other differences in the .o files have to do with NOPs.  The current
NOP used in LLVM is a mov r0, r0 but GNU as like to use the real nop
instruction. This issue will be addressed separately.

So far the only failing test on PIC mode is env_var_test
On non-pic everything passes.

BUG=http://code.google.com/p/nativeclient/issues/detail?id=1588
BUG=http://code.google.com/p/nativeclient/issues/detail?id=424
TEST=utman.sh test-arm
TEST=utman.sh test-arm-pic

 From llvm-pnacl-0024-248-6960fea5debd1c1c8aac5f0af79c5551d677b091.patch

diff -r 1143dbba8cd2 lib/MC/ELFObjectWriter.cpp
--- a/lib/MC/ELFObjectWriter.cpp	Fri Apr 15 18:11:24 2011 -0400
+++ b/lib/MC/ELFObjectWriter.cpp	Wed Jul 06 17:46:20 2011 -0700
@@ -25,17 +25,32 @@
 #include "llvm/Support/ELF.h"
 #include "llvm/Target/TargetAsmBackend.h"
 #include "llvm/ADT/StringSwitch.h"
-
+#include "llvm/Support/CommandLine.h"
 #include "../Target/X86/X86FixupKinds.h"
 #include "../Target/ARM/ARMFixupKinds.h"
 
 #include <vector>
 using namespace llvm;
 
+//@LOCALMOD-BEGIN-TO-BE-UPSTREAMED
+#undef  DEBUG_TYPE
+#define DEBUG_TYPE "reloc-info"
+
+// Emulate the wierd behavior of GNU-as for relocation types
+namespace llvm {
+cl::opt<bool>
+ForceARMElfPIC("arm-elf-force-pic", cl::Hidden, cl::init(false),
+               cl::desc("Force ELF emitter to emit PIC style relocations"));
+}
+//@LOCALMOD-END
+
+}
+//@LOCALMOD-END
+
 bool ELFObjectWriter::isFixupKindPCRel(const MCAssembler &Asm, unsigned Kind) {
   const MCFixupKindInfo &FKI =
     Asm.getBackend().getFixupKindInfo((MCFixupKind) Kind);
-
+    
   return FKI.Flags & MCFixupKindInfo::FKF_IsPCRel;
 }
 
@@ -332,9 +347,12 @@
   }
 }
 
+// @LOCALMOD-BEGIN-TO-BE-UPSTREAMED
 const MCSymbol *ELFObjectWriter::SymbolToReloc(const MCAssembler &Asm,
                                                const MCValue &Target,
-                                               const MCFragment &F) const {
+                                               const MCFragment &F,
+                                               const MCFixup &Fixup,
+                                               bool IsPCRel) const {
   const MCSymbol &Symbol = Target.getSymA()->getSymbol();
   const MCSymbol &ASymbol = Symbol.AliasedSymbol();
   const MCSymbol *Renamed = Renames.lookup(&Symbol);
@@ -357,7 +375,7 @@
   const SectionKind secKind = Section.getKind();
 
   if (secKind.isBSS())
-    return ExplicitRelSym(Asm, Target, F, true);
+    return ExplicitRelSym(Asm, Target, F, Fixup, IsPCRel); //@LOCALMOD
 
   if (secKind.isThreadLocal()) {
     if (Renamed)
@@ -373,7 +391,7 @@
       (Kind == MCSymbolRefExpr::VK_PLT ||
        Kind == MCSymbolRefExpr::VK_GOTPCREL ||
        Kind == MCSymbolRefExpr::VK_GOTOFF ||
-  // @LOCALMOD-BEGIN
+  // @LOCALMOD-BEGIN-IS-UPSTREAM
   // Fixes an LLVM bug. This bug has already been fixed upstream
   // and should disappear on the next merge.
        Kind == MCSymbolRefExpr::VK_NTPOFF)) {
@@ -385,15 +403,16 @@
 
   if (Section.getFlags() & ELF::SHF_MERGE) {
     if (Target.getConstant() == 0)
-      return NULL;
+      return ExplicitRelSym(Asm, Target, F, Fixup, IsPCRel); //@LOCALMOD
     if (Renamed)
       return Renamed;
     return &Symbol;
   }
 
-  return ExplicitRelSym(Asm, Target, F, false);
+  return ExplicitRelSym(Asm, Target, F, Fixup, IsPCRel);  //@LOCALMOD
 }
 
+// @LOCALMOD-END-TO-BE-UPSTREAMED
 
 void ELFObjectWriter::RecordRelocation(const MCAssembler &Asm,
                                        const MCAsmLayout &Layout,
@@ -410,8 +429,9 @@
   if (!Target.isAbsolute()) {
     const MCSymbol &Symbol = Target.getSymA()->getSymbol();
     const MCSymbol &ASymbol = Symbol.AliasedSymbol();
-    RelocSymbol = SymbolToReloc(Asm, Target, *Fragment);
-
+    // @LOCALMOD-BEGIN-TO-BE-UPSTREAMED
+    RelocSymbol = SymbolToReloc(Asm, Target, *Fragment, Fixup, IsPCRel);
+    // @LOCALMOD-END
     if (const MCSymbolRefExpr *RefB = Target.getSymB()) {
       const MCSymbol &SymbolB = RefB->getSymbol();
       MCSymbolData &SDB = Asm.getSymbolData(SymbolB);
@@ -1262,31 +1282,95 @@
 // In ARM, _MergedGlobals and other most symbols get emitted directly.
 // I.e. not as an offset to a section symbol.
 // This code is a first-cut approximation of what ARM/gcc does.
-
+int long RelCount=0, PCRelCount=0, NonPCRelCount=0;
 const MCSymbol *ARMELFObjectWriter::ExplicitRelSym(const MCAssembler &Asm,
                                                    const MCValue &Target,
                                                    const MCFragment &F,
-                                                   bool IsBSS) const {
+                                                   const MCFixup &Fixup,
+                                                   bool IsPCRel) const {
   const MCSymbol &Symbol = Target.getSymA()->getSymbol();
   bool EmitThisSym = false;
+  // @LOCALMOD-BEGIN-TODO-UPSTREAM
+  // Nearly the entire function need to be redone.
+  const MCSectionELF &Section =
+    static_cast<const MCSectionELF&>(Symbol.getSection());
+  const SectionKind secKind = Section.getKind();
+  const MCSymbolRefExpr::VariantKind Kind = Target.getSymA()->getKind();
+  MCSymbolRefExpr::VariantKind Kind2; 
+  Kind2 = Target.getSymB() ?  Target.getSymB()->getKind() :
+    MCSymbolRefExpr::VK_None;
+  bool InNormalSection = true;
+  unsigned RelocType = 0;
+  RelocType = GetRelocTypeInner(Target, Fixup, IsPCRel);
 
-  if (IsBSS) {
-    EmitThisSym = StringSwitch<bool>(Symbol.getName())
-      .Case("_MergedGlobals", true)
-      .Default(false);
+  DEBUG(dbgs() << "considering symbol "
+        << RelCount << "/"
+        << Section.getSectionName() << "/"
+        << Symbol.getName() << "/"
+        << " Rel:" << (unsigned)RelocType
+        << " Kind: " << (int)Kind << "/" << (int)Kind2
+        << " Tmp:"
+        << Symbol.isAbsolute() << "/" << Symbol.isDefined() << "/"
+        << Symbol.isVariable() << "/" << Symbol.isTemporary()
+        << " Counts:" << PCRelCount << "/" << NonPCRelCount << "\n";
+        ++RelCount);
+
+  if (IsPCRel || ForceARMElfPIC) { ++PCRelCount;
+    switch (RelocType) {
+    default:
+      // Most relocation types are emitted as explicit symbols
+      InNormalSection =
+        StringSwitch<bool>(Section.getSectionName())
+        .Case(".data.rel.ro.local", false)
+        .Case(".data.rel", false)
+        .Case(".bss", false)
+        .Default(true);
+      EmitThisSym = true;
+      break;
+    case ELF::R_ARM_ABS32:
+      // But things get strange with R_ARM_ABS32
+      // In this case, most things that go in .rodata show up 
+      // as section relative relocations
+      InNormalSection =
+        StringSwitch<bool>(Section.getSectionName())
+        .Case(".data.rel.ro.local", false)
+        .Case(".data.rel", false)
+        .Case(".rodata", false)
+        .Case(".bss", false)
+        .Default(true);
+      EmitThisSym = false;
+      break;
+    }
   } else {
-    EmitThisSym = StringSwitch<bool>(Symbol.getName())
-      .Case("_MergedGlobals", true)
-      .StartsWith(".L.str", true)
-      .Default(false);
-  }
+    NonPCRelCount++;
+    InNormalSection =
+      StringSwitch<bool>(Section.getSectionName())
+      .Case(".data.rel.ro.local", false)
+      .Case(".rodata", false)
+      .Case(".data.rel", false)
+      .Case(".bss", false)
+      .Default(true);
+
+    switch (RelocType) {
+    default: EmitThisSym = true; break;
+    case ELF::R_ARM_ABS32: EmitThisSym = false; break;
+    }
+    }
+
+
   if (EmitThisSym)
     return &Symbol;
-  if (! Symbol.isTemporary())
+  if (! Symbol.isTemporary() && InNormalSection) {
     return &Symbol;
+  }
+  // @LOCALMOD-END
   return NULL;
 }
 
+// @LOCALMOD-BEGIN-TO-BE-UPSTREAMED
+// Need to examine the Fixup when determining whether to 
+// emit the relocation as an explicit symbol or as a section relative
+// offset
 unsigned ARMELFObjectWriter::GetRelocType(const MCValue &Target,
                                           const MCFixup &Fixup,
                                           bool IsPCRel,
@@ -1295,6 +1379,20 @@
   MCSymbolRefExpr::VariantKind Modifier = Target.isAbsolute() ?
     MCSymbolRefExpr::VK_None : Target.getSymA()->getKind();
 
+  unsigned Type = GetRelocTypeInner(Target, Fixup, IsPCRel);
+
+  if (RelocNeedsGOT(Modifier))
+    NeedsGOT = true;
+  
+  return Type;
+}
+
+unsigned ARMELFObjectWriter::GetRelocTypeInner(const MCValue &Target,
+                                               const MCFixup &Fixup,
+                                               bool IsPCRel) const {
+  MCSymbolRefExpr::VariantKind Modifier = Target.isAbsolute() ?
+    MCSymbolRefExpr::VK_None : Target.getSymA()->getKind();
+
   unsigned Type = 0;
   if (IsPCRel) {
     switch ((unsigned)Fixup.getKind()) {
@@ -1303,7 +1401,7 @@
       switch (Modifier) {
       default: llvm_unreachable("Unsupported Modifier");
       case MCSymbolRefExpr::VK_None:
-        Type = ELF::R_ARM_BASE_PREL;
+        Type = ELF::R_ARM_REL32; // @LOCALMOD
         break;
       case MCSymbolRefExpr::VK_ARM_TLSGD:
         assert(0 && "unimplemented");
@@ -1324,7 +1422,15 @@
       }
       break;
     case ARM::fixup_arm_condbranch:
-      Type = ELF::R_ARM_JUMP24;
+      // @LOCALMOD-UPSTREAM-TODO
+      switch (Modifier) {
+      case MCSymbolRefExpr::VK_ARM_PLT:
+        Type = ELF::R_ARM_PLT32;
+        break;
+      default:
+        Type = ELF::R_ARM_JUMP24;
+        break;
+      } // @LOCALMOD-END
       break;
     case ARM::fixup_arm_movt_hi16:
     case ARM::fixup_arm_movt_hi16_pcrel:
@@ -1399,11 +1505,9 @@
     }
   }
 
-  if (RelocNeedsGOT(Modifier))
-    NeedsGOT = true;
-
   return Type;
 }
+// @LOCALMOD-END-TO-BE-UPSTREAMED
 
 //===- MBlazeELFObjectWriter -------------------------------------------===//
 
diff -r 1143dbba8cd2 lib/MC/ELFObjectWriter.h
--- a/lib/MC/ELFObjectWriter.h	Fri Apr 15 18:11:24 2011 -0400
+++ b/lib/MC/ELFObjectWriter.h	Wed Jul 06 17:46:20 2011 -0700
@@ -139,18 +139,22 @@
 
     unsigned ShstrtabIndex;
 
-
+    // @LOCALMOD-BEGIN-TO-BE-UPSTREAMED
     const MCSymbol *SymbolToReloc(const MCAssembler &Asm,
                                   const MCValue &Target,
-                                  const MCFragment &F) const;
+                                  const MCFragment &F,
+                                  const MCFixup &Fixup,
+                                  bool IsPCRel) const;
 
     // For arch-specific emission of explicit reloc symbol
     virtual const MCSymbol *ExplicitRelSym(const MCAssembler &Asm,
                                            const MCValue &Target,
                                            const MCFragment &F,
-                                           bool IsBSS) const {
+                                           const MCFixup &Fixup,
+                                           bool IsPCRel) const {
       return NULL;
     }
+    // @LOCALMOD-END
 
     bool is64Bit() const { return TargetObjectWriter->is64Bit(); }
     bool hasRelocationAddend() const {
@@ -388,14 +392,20 @@
 
     virtual void WriteEFlags();
   protected:
+    // @LOCALMOD-BEGIN-TO-BE-UPSTREAMED
     virtual const MCSymbol *ExplicitRelSym(const MCAssembler &Asm,
                                            const MCValue &Target,
                                            const MCFragment &F,
-                                           bool IsBSS) const;
+                                           const MCFixup &Fixup,
+                                           bool IsPCRel) const;
 
     virtual unsigned GetRelocType(const MCValue &Target, const MCFixup &Fixup,
                                   bool IsPCRel, bool IsRelocWithSymbol,
                                   int64_t Addend);
+  private:
+    unsigned GetRelocTypeInner(const MCValue &Target, const MCFixup &Fixup,
+                               bool IsPCRel) const ;
+    // @LOCALMOD-END-TO-BE-UPSTREAMED
   };
 
   //===- MBlazeELFObjectWriter -------------------------------------------===//
