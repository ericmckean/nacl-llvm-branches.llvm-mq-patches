# HG changeset patch
# User Jan Voung <jvoung@google.com>
# Date 1307989269 25200
# Branch pnacl-sfi
# Node ID 6789ea6de2530e312bc4f14b5a1e720490fe5b7b
# Parent 8feb7583084018d59099d3f51dcb62afb3df04ba
Add -mtls-use-call to llvm to test building the IRT for x86-32.
http://codereview.chromium.org/7024036/

 From pnacl-llvm-0041-265-6789ea6de2530e312bc4f14b5a1e720490fe5b7b.patch

diff -r 8feb75830840 lib/Target/X86/X86ISelLowering.cpp
--- a/lib/Target/X86/X86ISelLowering.cpp	Thu Jun 09 16:38:44 2011 -0400
+++ b/lib/Target/X86/X86ISelLowering.cpp	Thu Jul 14 15:16:16 2011 -0700
@@ -56,6 +56,16 @@
 
 STATISTIC(NumTailCalls, "Number of tail calls");
 
+// @LOCALMOD-BEGIN
+// Generate a call for TLS TP reads, instead of using a segment register.
+namespace {
+cl::opt<bool>
+TLSUseCall("mtls-use-call",
+           cl::desc("Use a function to get the TP for TLS exec models"),
+           cl::init(false));
+}  // namespace
+// @LOCALMOD-END
+
 // Forward declarations.
 static SDValue getMOVL(SelectionDAG &DAG, DebugLoc dl, EVT VT, SDValue V1,
                        SDValue V2);
@@ -6468,7 +6478,8 @@
 static SDValue
 GetTLSADDR(SelectionDAG &DAG, SDValue Chain, GlobalAddressSDNode *GA,
            SDValue *InFlag, const EVT PtrVT, unsigned ReturnReg,
-           unsigned char OperandFlags, unsigned Opcode = 0) { // @LOCALMOD
+           unsigned char OperandFlags,
+           unsigned Opcode = X86ISD::TLSADDR) { // @LOCALMOD
   MachineFrameInfo *MFI = DAG.getMachineFunction().getFrameInfo();
   SDVTList NodeTys = DAG.getVTList(MVT::Other, MVT::Glue);
   DebugLoc dl = GA->getDebugLoc();
@@ -6476,10 +6487,6 @@
                                            GA->getValueType(0),
                                            GA->getOffset(),
                                            OperandFlags);
-  // @LOCALMOD-BEGIN
-  if (Opcode == 0)
-    Opcode = X86ISD::TLSADDR;
-  // @LOCALMOD-END
   if (InFlag) {
     SDValue Ops[] = { Chain,  TGA, *InFlag };
     Chain = DAG.getNode(Opcode, dl, NodeTys, Ops, 3); // @LOCALMOD
@@ -6518,7 +6525,30 @@
 }
 
 // @LOCALMOD-START
-// Lower ISD::GlobalTLSAddress using the "general dynamic" model, NaCl 64 bit.
+// Lower TLS accesses to a function call, rather than use segment registers.
+static SDValue
+LowerToTLSExecCall(GlobalAddressSDNode *GA, SelectionDAG &DAG,
+                   const EVT PtrVT, TLSModel::Model model, bool is64Bit) {
+
+  // See: http://code.google.com/p/nativeclient/issues/detail?id=1685
+  unsigned char TargetFlag;
+  unsigned Opcode;
+  if (model == TLSModel::LocalExec) {
+    TargetFlag = is64Bit ? X86II::MO_TPOFF : X86II::MO_NTPOFF;
+    Opcode = X86ISD::TLSADDR_LE;
+  } else if (model == TLSModel::InitialExec) {
+    TargetFlag = is64Bit ? X86II::MO_GOTTPOFF : X86II::MO_INDNTPOFF;
+    Opcode = X86ISD::TLSADDR_IE;
+  } else {
+    llvm_unreachable("Unknown TLS model");
+  }
+
+  return GetTLSADDR(DAG, DAG.getEntryNode(), GA, NULL, PtrVT,
+                    X86::EAX, // PtrVT is 32-bit.
+                    TargetFlag, Opcode);
+}
+
+// Lower ISD::GlobalTLSAddress for NaCl 64 bit.
 static SDValue
 LowerToTLSNaCl64(GlobalAddressSDNode *GA, SelectionDAG &DAG,
                  const EVT PtrVT, TLSModel::Model model) {
@@ -6529,14 +6559,8 @@
   if (model == TLSModel::GeneralDynamic || model == TLSModel::LocalDynamic) {
     TargetFlag = X86II::MO_TLSGD;
     Opcode = X86ISD::TLSADDR;
-  } else if (model == TLSModel::LocalExec) {
-    TargetFlag = X86II::MO_TPOFF;
-    Opcode = X86ISD::TLSADDR_LE;
-  } else if (model == TLSModel::InitialExec) {
-    TargetFlag = X86II::MO_GOTTPOFF;
-    Opcode = X86ISD::TLSADDR_IE;
   } else {
-    llvm_unreachable("Unknown TLS model");
+    return LowerToTLSExecCall(GA, DAG, PtrVT, model, true);
   }
 
   return GetTLSADDR(DAG, DAG.getEntryNode(), GA, NULL, PtrVT,
@@ -6622,8 +6646,15 @@
         return LowerToTLSGeneralDynamicModel32(GA, DAG, getPointerTy());
       case TLSModel::InitialExec:
       case TLSModel::LocalExec:
-        return LowerToTLSExecModel(GA, DAG, getPointerTy(), model,
-                                   Subtarget->is64Bit());
+        // @LOCALMOD-START
+        if (TLSUseCall) {
+          return LowerToTLSExecCall(GA, DAG, getPointerTy(), model,
+                                    Subtarget->is64Bit());
+        } else {
+          return LowerToTLSExecModel(GA, DAG, getPointerTy(), model,
+                                     Subtarget->is64Bit());
+        }
+        // @LOCALMOD-END
     }
   } else if (Subtarget->isTargetDarwin()) {
     // Darwin only has one model of TLS.  Lower to that.
diff -r 8feb75830840 lib/Target/X86/X86InstrNaCl.td
--- a/lib/Target/X86/X86InstrNaCl.td	Thu Jun 09 16:38:44 2011 -0400
+++ b/lib/Target/X86/X86InstrNaCl.td	Thu Jul 14 15:16:16 2011 -0700
@@ -312,6 +312,13 @@
 def NACL_CG_IE_TLS_addr64 : I<0, Pseudo, (outs), (ins i32mem:$sym), "",
                             [(X86tlsaddr_ie tls32addr:$sym)]>,
                             Requires<[IsNaCl64]>;
+// For mtls-use-call.
+def NACL_CG_LE_TLS_addr32 : I<0, Pseudo, (outs), (ins i32mem:$sym), "",
+                            [(X86tlsaddr_le tls32addr:$sym)]>,
+                            Requires<[IsNaCl32]>;
+def NACL_CG_IE_TLS_addr32 : I<0, Pseudo, (outs), (ins i32mem:$sym), "",
+                            [(X86tlsaddr_ie tls32addr:$sym)]>,
+                            Requires<[IsNaCl32]>;
 }
 
 let usesCustomInserter = 1, Defs = [EFLAGS] in
diff -r 8feb75830840 lib/Target/X86/X86NaClRewritePass.cpp
--- a/lib/Target/X86/X86NaClRewritePass.cpp	Thu Jun 09 16:38:44 2011 -0400
+++ b/lib/Target/X86/X86NaClRewritePass.cpp	Thu Jul 14 15:16:16 2011 -0700
@@ -599,16 +599,27 @@
   }
 
   // Local Exec NaCl TLS Model
-  if (Opc == X86::NACL_CG_LE_TLS_addr64) {
+  if (Opc == X86::NACL_CG_LE_TLS_addr64 ||
+      Opc == X86::NACL_CG_LE_TLS_addr32) {
+    unsigned CallOpc, LeaOpc, Reg;
     // Rewrite to:
     //   naclcall __nacl_read_tp@PLT
-    //   leaq $sym@flag(,%rax), %rax
-    BuildMI(MBB, MBBI, DL, TII->get(X86::NACL_CALL64d))
+    //   lea $sym@flag(,%reg), %reg
+    if (Opc == X86::NACL_CG_LE_TLS_addr64) {
+      CallOpc = X86::NACL_CALL64d;
+      LeaOpc = X86::LEA64r;
+      Reg = X86::RAX;
+    } else {
+      CallOpc = X86::NACL_CALL32d;
+      LeaOpc = X86::LEA32r;
+      Reg = X86::EAX;
+    }
+    BuildMI(MBB, MBBI, DL, TII->get(CallOpc))
         .addExternalSymbol("__nacl_read_tp", X86II::MO_PLT);
-    BuildMI(MBB, MBBI, DL, TII->get(X86::LEA64r), X86::RAX)
+    BuildMI(MBB, MBBI, DL, TII->get(LeaOpc), Reg)
         .addReg(0) // Base
         .addImm(1) // Scale
-        .addReg(X86::RAX) // Index
+        .addReg(Reg) // Index
         .addGlobalAddress(MI.getOperand(3).getGlobal(), 0,
                           MI.getOperand(3).getTargetFlags())
         .addReg(0); // Segment
@@ -617,15 +628,29 @@
   }
 
   // Initial Exec NaCl TLS Model
-  if (Opc == X86::NACL_CG_IE_TLS_addr64) {
+  if (Opc == X86::NACL_CG_IE_TLS_addr64 ||
+      Opc == X86::NACL_CG_IE_TLS_addr32) {
+    unsigned CallOpc, AddOpc, Base, Reg;
     // Rewrite to:
     //   naclcall __nacl_read_tp@PLT
-    //   addq sym@GOTTPOFF(%rip), %rax
-    BuildMI(MBB, MBBI, DL, TII->get(X86::NACL_CALL64d))
+    //   addq sym@flag(%base), %reg
+    if (Opc == X86::NACL_CG_IE_TLS_addr64) {
+      CallOpc = X86::NACL_CALL64d;
+      AddOpc = X86::ADD64rm;
+      Base = X86::RIP;
+      Reg = X86::RAX;
+    } else {
+      CallOpc = X86::NACL_CALL32d;
+      AddOpc = X86::ADD32rm;
+      Base = MI.getOperand(3).getTargetFlags() == X86II::MO_INDNTPOFF ?
+          0 : X86::EBX; // EBX for GOTNTPOFF.
+      Reg = X86::EAX;
+    }
+    BuildMI(MBB, MBBI, DL, TII->get(CallOpc))
         .addExternalSymbol("__nacl_read_tp", X86II::MO_PLT);
-    BuildMI(MBB, MBBI, DL, TII->get(X86::ADD64rm), X86::RAX)
-        .addReg(X86::RAX)
-        .addReg(X86::RIP) // Base
+    BuildMI(MBB, MBBI, DL, TII->get(AddOpc), Reg)
+        .addReg(Reg)
+        .addReg(Base)
         .addImm(1) // Scale
         .addReg(0) // Index
         .addGlobalAddress(MI.getOperand(3).getGlobal(), 0,
