# HG changeset patch
# User robertm@google.com
# Date 1301583364 14400
# Branch pnacl-sfi
# Node ID c8ae915976a2fb44501aa08753770a66f2fa7f51
# Parent 71a783f74c9676ef577547fe08f2b5e66f4266ea
Added functionality to llvm-ld to make it suitable as and abi checker for pexe.

For now this checks whether the pexe makes calls to external functions and intrinsics that are not deemed appropriate.

The tool needs to be invoked like so:

toolchain/linux_arm-untrusted/arm-none-linux-gnueabi/bin/llvm-ld -o xxx scons-out/nacl-x86-64-pnacl/obj/tests/earth/earth.nexe---linked.pexe --nacl-abi-check --nacl-legal-undefs tools/llvm/non_bitcode_symbols.txt


Also:
* add mechanism to dump undefined symbols in pexe as a preparation to check those against a set of allowed symbols.

* made whole program optimization pass optional and off by default

* Add mechanism to force symbols as external

BUG= http://code.google.com/p/nativeclient/issues/detail?id=1562

 From llvm-pnacl-0020-244-c8ae915976a2fb44501aa08753770a66f2fa7f51.patch

 From .hg/patches/llvm-pnacl-0020-244-c8ae915976a2fb44501aa08753770a66f2fa7f51.patch.stripped

diff -r 71a783f74c96 lib/Linker/LinkArchives.cpp
--- a/lib/Linker/LinkArchives.cpp	Mon Mar 28 17:07:16 2011 -0700
+++ b/lib/Linker/LinkArchives.cpp	Tue Jun 07 14:28:37 2011 -0700
@@ -17,10 +17,24 @@
 #include "llvm/ADT/SetOperations.h"
 #include "llvm/Bitcode/Archive.h"
 #include "llvm/Config/config.h"
+
+#include "llvm/Support/CommandLine.h" // @LOCALMOD
+
 #include <memory>
 #include <set>
 using namespace llvm;
 
+// @LOCALMOD-START
+// NOTE: this has a similar effect as
+//        tools/llvm/llvm-preserve.ll
+// which in turn is similar to the GNUS's attribute((used))
+// TODO(robertm): This is a little hackish for now
+static cl::list<std::string>
+UndefList("referenced-list", cl::value_desc("list"),
+          cl::desc("A list of symbols assumed to be referenced externally"),
+          cl::CommaSeparated);
+// @LOCALMOD-END
+  
 /// GetAllUndefinedSymbols - calculates the set of undefined symbols that still
 /// exist in an LLVM module. This is a bit tricky because there may be two
 /// symbols with the same name but different LLVM types that will be resolved to
@@ -37,7 +51,10 @@
 GetAllUndefinedSymbols(Module *M, std::set<std::string> &UndefinedSymbols) {
   std::set<std::string> DefinedSymbols;
   UndefinedSymbols.clear();
-
+  // @LOCALMOD-START
+  UndefinedSymbols.insert(UndefList.begin(), UndefList.end());
+  // @LOCALMOD-END
+  
   // If the program doesn't define a main, try pulling one in from a .a file.
   // This is needed for programs where the main function is defined in an
   // archive, such f2c'd programs.
diff -r 71a783f74c96 tools/Makefile
--- a/tools/Makefile	Mon Mar 28 17:07:16 2011 -0700
+++ b/tools/Makefile	Tue Jun 07 14:28:37 2011 -0700
@@ -15,13 +15,10 @@
 # NOTE: The tools are organized into five groups of four consisting of one
 # large and three small executables. This is done to minimize memory load
 # in parallel builds.  Please retain this ordering.
-# NOTE: In NaCl we avoid building llvm-ld, llvm-ar and llvm-ranlib.
-# These tools have big problems that have hurt us in the past.
-# See http://codereview.appspot.com/2151043/
 DIRS := llvm-config 
 PARALLEL_DIRS := opt llvm-as llvm-dis \
-                 llc llvm-nm \
-                 llvm-prof llvm-link \
+                 llc llvm-ranlib llvm-ar llvm-nm \
+                 llvm-ld llvm-prof llvm-link \
                  lli llvm-extract llvm-mc \
                  bugpoint llvm-bcanalyzer llvm-stub \
                  llvmc llvm-diff macho-dump llvm-objdump bc-wrap
diff -r 71a783f74c96 tools/llc/llc.cpp
--- a/tools/llc/llc.cpp	Mon Mar 28 17:07:16 2011 -0700
+++ b/tools/llc/llc.cpp	Tue Jun 07 14:28:37 2011 -0700
@@ -40,6 +40,10 @@
 #include "llvm/Target/TargetSelect.h"
 #include <memory>
 
+
+volatile double d1 = 1.3433543;
+volatile double d2 = 100000.3433543;
+
 #if defined(__native_client__) && defined(NACL_SRPC)
 #include <fcntl.h>
 #include <sys/nacl_syscalls.h>
@@ -345,7 +349,8 @@
   case '2': OLvl = CodeGenOpt::Default; break;
   case '3': OLvl = CodeGenOpt::Aggressive; break;
   }
-
+  
+  DEBUG(dbgs() << "@@@@@@@ Clusterify finished " << d1 << " " << d2 << '\n');
   // Build up all of the passes that we want to do to the module.
   PassManager PM;
 
diff -r 71a783f74c96 tools/llvm-ld/llvm-ld.cpp
--- a/tools/llvm-ld/llvm-ld.cpp	Mon Mar 28 17:07:16 2011 -0700
+++ b/tools/llvm-ld/llvm-ld.cpp	Tue Jun 07 14:28:37 2011 -0700
@@ -40,6 +40,11 @@
 #include "llvm/Config/config.h"
 #include <memory>
 #include <cstring>
+// @LOCALMOD-BEGIN
+#include <fstream>
+#include <algorithm>
+#include <llvm/Support/raw_ostream.h>
+// @LOCALMOD-END
 using namespace llvm;
 
 // Rightly this should go in a header file but it just seems such a waste.
@@ -121,6 +126,21 @@
 static cl::opt<std::string> CO9("m", cl::Hidden,
   cl::desc("Compatibility option: ignored"));
 
+// @LOCALMOD-BEGIN
+static cl::opt<bool> FlagOptimizePexe("optimize-pexe",
+  cl::desc("whole program optimize the resulting pexe"));
+
+static cl::opt<bool> FlagDumpUndefinedSymbols("dump-undefined-symbols",
+  cl::desc("dump undefined symbols before exiting"));
+
+static cl::opt<bool> FlagNaClAbiCheck("nacl-abi-check",
+  cl::desc("check nacl abi compliance"));
+
+static cl::opt<std::string> FlagNaClLegalUndefs("nacl-legal-undefs",
+  cl::init(""),
+  cl::desc("file with list of undefs resolved by llc or the linker"));
+// @LOCALMOD-END
+
 /// This is just for convenience so it doesn't have to be passed around
 /// everywhere.
 static std::string progname;
@@ -149,6 +169,107 @@
   errs() << "\n";
 }
 
+// @LOCALMOD-BEGIN
+static std::string Strip(std::string s) {
+  size_t start = s.find_first_not_of(" \t\n\r");
+  if (start == std::string::npos) return "";
+  if (s[start] == '#') return "";
+  size_t last = s.find_last_not_of(" \t\n\r");
+  return s.substr(start, 1 + last - start);
+}
+
+static int AddStringSetFromFile(std::string filename,
+                                std::set<std::string>* set) {
+  std::ifstream f(filename.c_str());
+  if (!f) {
+    return -1;
+  }
+
+  while (!f.eof()) {
+    std::string s;
+    getline(f, s);
+    std::string stripped = Strip(s);
+    if (stripped.size() == 0) continue;
+    set->insert(stripped);
+  }
+  f.close();
+  return 0;
+}
+
+// Here is a rough translation for GlobalValues to nm style attributes:
+// GV.isDeclaration()                                 'U'
+// GV.hasLinkOnceLinkage()                            'C'
+// GV.hasCommonLinkage()                              'C'
+// GV.hasWeakLinkage()                                'W'
+// isa<Function>(GV) && GV.hasInternalLinkage()       't'
+// isa<Function>(GV)                                  'T'
+// isa<GlobalVariable>(GV) && GV.hasInternalLinkage() 'd'
+// isa<GlobalVariable>(GV)                            'D'
+
+static size_t DumpUndefinedSymbols(Module* M) {
+  std::set<std::string> Referenced;
+  std::set<std::string> Defined;
+
+  for (Module::iterator I = M->begin(), E = M->end(); I != E; ++I)
+    if (I->hasName()) {
+      if (I->isDeclaration()) {
+        Referenced.insert(I->getName());
+      } else if (!I->hasLocalLinkage()) {
+        assert(!I->hasDLLImportLinkage()
+               && "Found dllimported non-external symbol!");
+        Defined.insert(I->getName());
+      }
+    }
+
+  for (Module::global_iterator I = M->global_begin(), E = M->global_end();
+       I != E; ++I)
+    if (I->hasName()) {
+      if (I->isDeclaration()) {
+        Referenced.insert(I->getName());
+      } else if (!I->hasLocalLinkage()) {
+        assert(!I->hasDLLImportLinkage()
+               && "Found dllimported non-external symbol!");
+        Defined.insert(I->getName());
+      }
+    }
+
+  for (Module::alias_iterator I = M->alias_begin(), E = M->alias_end();
+       I != E; ++I) {
+    if (I->hasName()) Defined.insert(I->getName());
+
+  }
+
+  // pretend those are defined
+  if (FlagNaClLegalUndefs.size() > 0) {
+    int ec = AddStringSetFromFile(FlagNaClLegalUndefs, &Defined);
+    if (ec) {
+      PrintAndExit("ERROR: cannot process file: " + FlagNaClLegalUndefs + "\n", M);
+    }
+  }
+
+  std::set<std::string> Undefined;
+  std::set_difference(Referenced.begin(), Referenced.end(),
+                      Defined.begin(), Defined.end(),
+                      std::inserter(Undefined, Undefined.end()));
+
+  if  (Undefined.size() > 0) {
+    outs() << "#List of undefined symbols:\n";
+  }
+
+  for (std::set<std::string>::iterator I = Undefined.begin();
+       I != Undefined.end();
+       ++I) {
+    outs() << *I << "\n";
+  }
+
+  if  (FlagNaClAbiCheck && Undefined.size() > 0) {
+    PrintAndExit("ERROR: This pexe is not abi compliant\n", M);
+  }
+
+  return Undefined.size();
+}
+// @LOCALMOD-END
+
 /// CopyEnv - This function takes an array of environment variables and makes a
 /// copy of it.  This copy can then be manipulated any way the caller likes
 /// without affecting the process's real environment.
@@ -601,8 +722,16 @@
   std::auto_ptr<Module> Composite(TheLinker.releaseModule());
 
   // Optimize the module
-  Optimize(Composite.get());
+  // @LOCALMOD-BEGIN
+  if (FlagOptimizePexe) {
+    Optimize(Composite.get());
+  }
 
+  if (FlagDumpUndefinedSymbols || FlagNaClAbiCheck) {
+    DumpUndefinedSymbols(Composite.get());
+  }
+
+  // @LOCALMOD-END
   // Generate the bitcode output.
   GenerateBitcode(Composite.get(), BitcodeOutputFilename);
 
