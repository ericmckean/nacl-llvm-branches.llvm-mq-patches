# HG changeset patch
# User robertm@google.com
# Date 1302905484 14400
# Branch pnacl-sfi
# Node ID b14dd43db2609a5097a54c8f2703a8ac1fd060f8
# Parent d5c85e15d9198bbd718b1337ad612598736e4f50
This adds functionality for an annotated symbol dump to llvm-ld.

E.g.:
toolchain/linux_arm-untrusted/arm-none-linux-gnueabi/bin/llvm-ld
--dump-symbols-beginning
scons-out/nacl-x86-32-pnacl/obj/tests/hello_world/printf.*pexe

FUN-EXTERNAL: __nacl_startup
FUN-INTERNAL: _init
FUN-INTERNAL: _fini
...

This has more detail than llvm-nm and should shed some light on the link-once
issue as well.


BUG= http://code.google.com/p/nativeclient/issues/detail?id=842
TEST= tools/llvm/utman.sh  llvm


Please review this at http://codereview.chromium.org/6822040/

 From llvm-pnacl-0023-247-b14dd43db2609a5097a54c8f2703a8ac1fd060f8.patch

 From .hg/patches/llvm-pnacl-0023-247-b14dd43db2609a5097a54c8f2703a8ac1fd060f8.patch.stripped

diff -r d5c85e15d919 tools/llvm-ld/llvm-ld.cpp
--- a/tools/llvm-ld/llvm-ld.cpp	Fri Apr 01 11:05:59 2011 -0700
+++ b/tools/llvm-ld/llvm-ld.cpp	Wed Jun 29 23:05:04 2011 -0700
@@ -41,6 +41,7 @@
 #include <memory>
 #include <cstring>
 // @LOCALMOD-BEGIN
+#include <string>
 #include <fstream>
 #include <algorithm>
 #include <llvm/Support/raw_ostream.h>
@@ -133,6 +134,12 @@
 static cl::opt<bool> FlagDumpUndefinedSymbols("dump-undefined-symbols",
   cl::desc("dump undefined symbols before exiting"));
 
+static cl::opt<bool> FlagDumpSymbolsPreOpt("dump-symbols-preopt",
+  cl::desc("dump symbol summary at beginning"));
+
+static cl::opt<bool> FlagDumpSymbolsPostOpt("dump-symbols-postopt",
+  cl::desc("dump symbol summary at end"));
+
 static cl::opt<bool> FlagNaClAbiCheck("nacl-abi-check",
   cl::desc("check nacl abi compliance"));
 
@@ -268,6 +275,80 @@
 
   return Undefined.size();
 }
+
+
+std::string ValueLinkage(GlobalValue* gv) {
+  switch (gv->getLinkage()) {
+   default:
+    return "@@@ERROR";
+   case GlobalValue::ExternalLinkage:
+    return "EXTERNAL";
+   case GlobalValue::AvailableExternallyLinkage:
+    return "AVEXTERN";
+   case GlobalValue::LinkOnceAnyLinkage:
+    return "ONCE_ANY";
+   case GlobalValue::LinkOnceODRLinkage:
+    return "ONCE_ODR";
+   case GlobalValue::WeakAnyLinkage:
+    return "WEAK_ANY";
+   case GlobalValue::WeakODRLinkage:
+    return "WEAK_ODR";
+   case GlobalValue::AppendingLinkage:
+    return "APPEND__";
+   case GlobalValue::InternalLinkage:
+    return "INTERNAL";
+   case GlobalValue::PrivateLinkage:
+    return "PRIVATE_";
+   case GlobalValue::LinkerPrivateLinkage:
+    return "LD_PRIV_";
+   case GlobalValue::LinkerPrivateWeakLinkage:
+    return "LD_PR_WK";
+   case GlobalValue::LinkerPrivateWeakDefAutoLinkage:
+    return "LD_P_W_D";
+   case GlobalValue::ExternalWeakLinkage:
+    return "EXT_WEAK";
+   case GlobalValue::CommonLinkage:
+     return "COMMON_";
+  }
+}
+
+
+void DumpSymbolSummary(Module* M) {
+  // Functions
+  for (Module::iterator I = M->begin(), E = M->end(); I != E; ++I) {
+    const std::string name = I->getName();
+    const std::string linkage = ValueLinkage(I);
+    std::string extra;
+
+    if (I->hasAddressTaken()) {
+      extra = " ADDRESS_TAKEN";
+    }
+
+    outs() << "FUN-" << linkage << ": " << name << extra << "\n";
+  }
+
+  // Variables
+  for (Module::global_iterator I = M->global_begin(), E = M->global_end();
+       I != E; ++I) {
+    const std::string name = I->getName();
+    const std::string linkage = ValueLinkage(I);
+    std::string extra;
+
+    outs() << "VAR-" << linkage << ": " << name << extra << "\n";
+  }
+
+  // Mark all aliases that are not in the api as internal as well.
+  for (Module::alias_iterator I = M->alias_begin(), E = M->alias_end();
+       I != E; ++I) {
+    const std::string name = I->getName();
+    const std::string linkage = ValueLinkage(I);
+    std::string extra;
+
+    outs() << "ALS-" << linkage << ": " << name << extra << "\n";
+  }
+}
+
+
 // @LOCALMOD-END
 
 /// CopyEnv - This function takes an array of environment variables and makes a
@@ -723,6 +804,10 @@
 
   // Optimize the module
   // @LOCALMOD-BEGIN
+  if (FlagDumpSymbolsPreOpt) {
+    DumpSymbolSummary(Composite.get());
+  }
+
   if (FlagOptimizePexe) {
     Optimize(Composite.get());
   }
@@ -731,6 +816,10 @@
     DumpUndefinedSymbols(Composite.get());
   }
 
+  if (FlagDumpSymbolsPostOpt) {
+    DumpSymbolSummary(Composite.get());
+  }
+
   // @LOCALMOD-END
   // Generate the bitcode output.
   GenerateBitcode(Composite.get(), BitcodeOutputFilename);
