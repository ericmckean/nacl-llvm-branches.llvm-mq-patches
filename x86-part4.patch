# HG changeset patch
# Parent d628685eae13c1cb3a6cdfd02904b070e98a71f5
localmod:lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp lib/Target/X86/X86RegisterInfo.cpp lib/Target/X86/X86RegisterInfo.td lib/Target/X86/X86TargetMachine.cpp

diff -r d628685eae13 -r 96ab26c18135 lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp
--- a/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp	Tue Aug 09 13:16:42 2011 -0700
+++ b/lib/Target/X86/MCTargetDesc/X86MCCodeEmitter.cpp	Tue Aug 09 13:58:00 2011 -0700
@@ -864,6 +864,10 @@
     assert(0 && "Unknown FormMask value in X86MCCodeEmitter!");
   case X86II::Pseudo:
     assert(0 && "Pseudo instruction shouldn't be emitted");
+  // @LOCALMOD-BEGIN
+  case X86II::CustomFrm:
+    assert(0 && "CustomFrm instruction shouldn't be emitted");
+  // @LOCALMOD-END
   case X86II::RawFrm:
     EmitByte(BaseOpcode, CurByte, OS);
     break;
diff -r d628685eae13 -r 96ab26c18135 lib/Target/X86/X86RegisterInfo.cpp
--- a/lib/Target/X86/X86RegisterInfo.cpp	Tue Aug 09 13:16:42 2011 -0700
+++ b/lib/Target/X86/X86RegisterInfo.cpp	Tue Aug 09 13:58:00 2011 -0700
@@ -424,6 +424,20 @@
     }
   }
 
+  // @LOCALMOD-START
+  const X86Subtarget& Subtarget = MF.getTarget().getSubtarget<X86Subtarget>();
+  if (Subtarget.isTargetNaCl64()) {
+    Reserved.set(X86::R15);
+    Reserved.set(X86::R15D);
+    Reserved.set(X86::R15W);
+    Reserved.set(X86::R15B);
+    Reserved.set(X86::RBP);
+    Reserved.set(X86::EBP);
+    Reserved.set(X86::BP);
+    Reserved.set(X86::BPL);
+  }
+  // @LOCALMOD-END
+
   return Reserved;
 }
 
diff -r d628685eae13 -r 96ab26c18135 lib/Target/X86/X86RegisterInfo.td
--- a/lib/Target/X86/X86RegisterInfo.td	Tue Aug 09 13:16:42 2011 -0700
+++ b/lib/Target/X86/X86RegisterInfo.td	Tue Aug 09 13:58:00 2011 -0700
@@ -356,6 +356,13 @@
 def GR32_TC   : RegisterClass<"X86", [i32], 32, (add EAX, ECX, EDX)> {
   let SubRegClasses = [(GR8 sub_8bit, sub_8bit_hi), (GR16 sub_16bit)];
 }
+// @LOCALMOD-START
+def GR32_TC_64: RegisterClass<"X86", [i32], 32, [EAX, ECX, EDX, ESI, EDI,
+                                                 R8D, R9D, R11D]> {
+  let SubRegClasses = [(GR8 sub_8bit, sub_8bit_hi), (GR16 sub_16bit)];
+}
+// @LOCALMOD-END
+
 def GR64_TC   : RegisterClass<"X86", [i64], 64, (add RAX, RCX, RDX, RSI, RDI,
                                                      R8, R9, R11, RIP)> {
   let SubRegClasses = [(GR8 sub_8bit, sub_8bit_hi),
diff -r d628685eae13 -r 96ab26c18135 lib/Target/X86/X86TargetMachine.cpp
--- a/lib/Target/X86/X86TargetMachine.cpp	Tue Aug 09 13:16:42 2011 -0700
+++ b/lib/Target/X86/X86TargetMachine.cpp	Tue Aug 09 13:58:00 2011 -0700
@@ -51,7 +51,9 @@
                                          StringRef CPU, StringRef FS,
                                          Reloc::Model RM, CodeModel::Model CM)
   : X86TargetMachine(T, TT, CPU, FS, RM, CM, true),
-    DataLayout("e-p:64:64-s:64-f64:64:64-i64:64:64-f80:128:128-f128:128:128-n8:16:32:64"),
+    DataLayout(getSubtargetImpl()->isTargetNaCl() ?
+               "e-p:32:32-s:64-f64:64:64-f32:32:32-f80:128:128-i64:64:64-n8:16:32:64" : 
+               "e-p:64:64-s:64-f64:64:64-i64:64:64-f80:128:128-f128:128:128-n8:16:32:64"),
     InstrInfo(*this),
     TSInfo(*this),
     TLInfo(*this),
