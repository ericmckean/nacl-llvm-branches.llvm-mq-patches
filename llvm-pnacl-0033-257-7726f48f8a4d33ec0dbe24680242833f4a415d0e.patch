# HG changeset patch
# User robertm@google.com
# Date 1305582742 14400
# Branch pnacl-sfi
# Node ID 7726f48f8a4d33ec0dbe24680242833f4a415d0e
# Parent e6abf38250ead7b6c592a68ae54f004050e0fd22
Prune the functionality of nacl_file.cc to what is actually needed by the llc tool.
Also, cleanup some debug code accidentally left behind by a previous commit.

CL= http://codereview.chromium.org/7035010/

TEST=
tools/llvm/utman.sh install-translators srpc
./scons platform=x86-32 use_sandboxed_translator=1 bitcode=1 smoke_tests --verbose
./scons bitcode=1 platform=x86-64 run_pnacl_srpc_hw_browser_test

 From llvm-pnacl-0033-257-7726f48f8a4d33ec0dbe24680242833f4a415d0e.patch

 From .hg/patches/llvm-pnacl-0033-257-7726f48f8a4d33ec0dbe24680242833f4a415d0e.patch.stripped

diff -r e6abf38250ea tools/llc/Makefile
--- a/tools/llc/Makefile	Fri May 13 15:44:03 2011 -0400
+++ b/tools/llc/Makefile	Wed Jun 22 13:15:59 2011 -0700
@@ -17,9 +17,5 @@
 
 LINK_COMPONENTS := $(TARGETS_TO_BUILD) bitreader asmparser
 
-ifeq ($(NACL_SRPC),1)
-  LDFLAGS += -Wl,--wrap=open,--wrap=read,--wrap=write,--wrap=close,--wrap=lseek
-endif
-
 include $(LLVM_SRC_ROOT)/Makefile.rules
 
diff -r e6abf38250ea tools/llc/llc.cpp
--- a/tools/llc/llc.cpp	Fri May 13 15:44:03 2011 -0400
+++ b/tools/llc/llc.cpp	Wed Jun 22 13:15:59 2011 -0700
@@ -40,17 +40,24 @@
 #include "llvm/Target/TargetSelect.h"
 #include <memory>
 
+using namespace llvm;
 
-volatile double d1 = 1.3433543;
-volatile double d2 = 100000.3433543;
+// @LOCALMOD-BEGIN
+// NOTE: this tool can be build as a "sandboxed" translator.
+//       There are two ways to build the translator
+//       SRPC-style:  no file operations are allowed
+//                    see nacl_file.cc for support code
+//       non-SRPC-style: some basic file operations are allowed
+//                       This can be useful for debugging but will
+//                       not be deployed.
+#if defined(__native_client__) && defined(NACL_SRPC)
+MemoryBuffer* NaClGetMemoryBufferForFile(const char* filename);
+void NaClOutputStringToFile(const char* filename, const std::string& data);
+#endif
+// @LOCALMOD-END
 
-#if defined(__native_client__) && defined(NACL_SRPC)
-#include <fcntl.h>
-#include <sys/nacl_syscalls.h>
-extern size_t get_real_size_by_name(const char *name);
-#endif
 
-using namespace llvm;
+
 
 // General options for llc.  Other pass-specific options are specified
 // within the corresponding llc passes, and target-specific options
@@ -225,28 +232,13 @@
   SMDiagnostic Err;
   std::auto_ptr<Module> M;
 
-  // This code opens and passes the input file size to the
-  // MemoryBuffer::getOpenFile. This, along with changes in MemoryBuffer.cpp
-  // helps prevent llc from mmap'ing the input bitcode file contents itself.
+  // In the NACL_SRPC case, fake a memory mapped file
+  // TODO(jvoung): revert changes in MemoryBuffer.cpp which are no longer needed
 #if defined(__native_client__) && defined(NACL_SRPC)
-  std::string ErrMsg;
-  int OpenFlags = O_RDONLY;
-#ifdef O_BINARY
-  OpenFlags |= O_BINARY;  // Open input file in binary mode on win32.
-#endif
-  int FD = ::open(InputFilename.c_str(), OpenFlags);
-  int64_t f_size = get_real_size_by_name(InputFilename.c_str());
-  OwningPtr<MemoryBuffer> F;
-  error_code err = MemoryBuffer::getOpenFile(FD,
-                                             InputFilename.c_str(),
-                                             F,
-                                             f_size);
-  if (!F) {
-    Err = SMDiagnostic(InputFilename.c_str(),
-                       "Could not open input file: " + err.message());
-    return 0;
-  }
-  M.reset(ParseIR(F.take(), Err, Context));
+  M.reset(ParseIR(NaClGetMemoryBufferForFile(InputFilename.c_str()),
+                  Err,
+                  Context));
+  M->setModuleIdentifier(InputFilename);
 #else
   M.reset(ParseIRFile(InputFilename, Err, Context));
 #endif // defined(__native_client__) && defined(NACL_SRPC)
@@ -333,11 +325,13 @@
     }
   }
 
+#if !defined(NACL_SRPC)
   // Figure out where we are going to send the output...
   OwningPtr<tool_output_file> Out
     (GetOutputStream(TheTarget->getName(), TheTriple.getOS(), argv[0]));
   if (!Out) return 1;
-
+#endif
+  
   CodeGenOpt::Level OLvl = CodeGenOpt::Default;
   switch (OptLevel) {
   default:
@@ -350,7 +344,6 @@
   case '3': OLvl = CodeGenOpt::Aggressive; break;
   }
   
-  DEBUG(dbgs() << "@@@@@@@ Clusterify finished " << d1 << " " << d2 << '\n');
   // Build up all of the passes that we want to do to the module.
   PassManager PM;
 
@@ -371,6 +364,27 @@
       Target.setMCRelaxAll(true);
   }
 
+
+  
+#if defined __native_client__ && defined(NACL_SRPC)
+  {
+    std::string s;
+    raw_string_ostream ROS(s);
+    formatted_raw_ostream FOS(ROS);
+    // Ask the target to add backend passes as necessary.
+    if (Target.addPassesToEmitFile(PM, FOS, FileType, OLvl, NoVerify)) {
+      errs() << argv[0] << ": target does not support generation of this"
+             << " file type!\n";
+      return 1;
+    }
+
+    PM.run(mod);
+    FOS.flush();
+    ROS.flush();
+    NaClOutputStringToFile(OutputFilename.c_str(), ROS.str());
+  }
+#else
+      
   {
     formatted_raw_ostream FOS(Out->os());
 
@@ -386,6 +400,7 @@
 
   // Declare success.
   Out->keep();
+#endif
 
   return 0;
 }
diff -r e6abf38250ea tools/llc/nacl_file.cpp
--- a/tools/llc/nacl_file.cpp	Fri May 13 15:44:03 2011 -0400
+++ b/tools/llc/nacl_file.cpp	Wed Jun 22 13:15:59 2011 -0700
@@ -17,603 +17,152 @@
 
 #if defined(__native_client__) && defined(NACL_SRPC)
 
-#include <errno.h>
 #include <fcntl.h>
-#include <pthread.h>
 #include <stdio.h>
-#include <stdlib.h>
 #include <string.h>
 #include <sys/mman.h>
 #include <sys/nacl_syscalls.h>
 #include <sys/types.h>
 #include <sys/stat.h>
-#include <unistd.h>
 #include <nacl/nacl_srpc.h>
 
-#define MAX_NACL_FILES 256
+
+#include <string>
+#include <map>
+
+#include "llvm/Support/MemoryBuffer.h"
+#include "llvm/ADT/StringRef.h"
+
+using llvm::MemoryBuffer;
+using llvm::StringRef;
+using std::string;
+using std::map;
+
 #define MMAP_PAGE_SIZE 64 * 1024
 #define MMAP_ROUND_MASK (MMAP_PAGE_SIZE - 1)
+#define printerr(...)  fprintf(stderr, __VA_ARGS__)
+#define printdbg(...)
 
-#define printerr(...)                           \
-  fprintf(stderr, __VA_ARGS__)
-
-extern "C" int __real_open(const char *pathname, int oflags, ...);
-extern "C" int __wrap_open(const char *pathname, int oflags, ...);
-extern "C" int __real_close(int dd);
-extern "C" int __wrap_close(int dd);
-extern "C" int __real_read(int dd, void *, size_t);
-extern "C" int __wrap_read(int dd, void *, size_t);
-extern "C" int __real_write(int dd, const void *, size_t);
-extern "C" int __wrap_write(int dd, const void *, size_t);
-extern "C" off_t __real_lseek(int dd, off_t offset, int whence);
-extern "C" off_t __wrap_lseek(int dd, off_t offset, int whence);
-extern int llc_main(int argc, char **argv);
-
-static int nacl_file_initialized = 0;
-
-struct NaCl_file_map {
-  char *filename;
-  int real_fd;
-  int is_reg_file;    /* We use shm for output, and UrlAsNaClDesc supplies
-                       * regular files. Differentiate between the two. */
-  pthread_mutex_t mu;
-  size_t size;        /* Bytes mmap'ed for this file. */
-  size_t real_size;   /* Bytes actually written, if it is a shm. */
-  struct NaCl_file_map *next;
-};
-
-struct NaCl_file_map *nacl_fs = NULL;
-static pthread_mutex_t nacl_fs_mu = PTHREAD_MUTEX_INITIALIZER;
-
-struct NaCl_file {
-  int mode;
-  off_t pos;
-  pthread_mutex_t mu;
-  struct NaCl_file_map *file_ptr;
-};
-
-static struct NaCl_file nacl_files[MAX_NACL_FILES];
-
-/* Check to see the |dd| is a valid NaCl shm file descriptor */
-static int IsValidDescriptor(int dd) {
-  return nacl_file_initialized && (dd >= 3) && (dd < MAX_NACL_FILES);
-}
 
 static size_t roundToNextPageSize(size_t size) {
   size_t count_up = size + (MMAP_ROUND_MASK);
   return (count_up & ~(MMAP_ROUND_MASK));
 }
 
-/* Create a new entry representing the shm file descriptor.
- * If real_size_opt is supplied, this means that we know
- * the real size of the shm file. Otherwise, we need to count on fstat.
- * Counting on fstat is fine if fd corresponds to a regular file.
- * Returns 0 on success. */
-int NaClFile_fd(char *pathname, int fd,
-                int has_real_size, size_t real_size_opt) {
-  int i;
-  int is_reg;
-  struct stat stb;
-  struct NaCl_file_map *entry;
+class FileInfo {
+ private:
+  static map<string, FileInfo*> descriptor_map_;
 
-  if (0 != fstat(fd, &stb)) {
-    errno = EBADF;
-    return -1;
-  }
+  string filename_;
+  int fd_;
+  int size_;
 
-  // NOTE: We do not have the S_ISSHM macro in our headers, only S_ISREG.
-  mode_t fmt = stb.st_mode & S_IFMT;
-  if (S_IFREG == fmt) {
-    is_reg = 1;
-  } else if (S_IFSHM == fmt) {
-    is_reg = 0;
-  } else {
-    printerr("nacl_file: %d non-shm and non-reg file?!\n", fd);
-    return -1;
-  }
-
-  entry = (struct NaCl_file_map*)(malloc(sizeof *entry));
-
-  if (NULL == entry) {
-    printerr("nacl_file: No memory for file map for %s\n", pathname);
-    exit(1);
-  }
-  if (NULL == (entry->filename = strdup(pathname))) {
-    printerr("nacl_file: No memory for file path %s\n", pathname);
-    exit(1);
-  }
-  entry->real_fd = fd;
-  if (has_real_size) {
-    // Let "size" be the value reported by stat. This may end up
-    // being a 64KB aligned value (for shm), but "size" should just
-    // represent how much was allocated. "real_size" will keep track
-    // of that actual end of file.
-    entry->size = stb.st_size;
-    entry->real_size = real_size_opt;
-  } else {
-    entry->size = stb.st_size;
-    entry->real_size = stb.st_size;
-  }
-  entry->is_reg_file = is_reg;
-
-  pthread_mutex_init(&(entry->mu), NULL);
-
-  pthread_mutex_lock(&nacl_fs_mu);
-
-  entry->next = nacl_fs;
-  nacl_fs = entry;
-
-  if (!nacl_file_initialized) {
-    for (i = 0; i < MAX_NACL_FILES; ++i) {
-      pthread_mutex_init(&nacl_files[i].mu, NULL);
-      nacl_files[i].file_ptr = NULL;
-    }
-    nacl_file_initialized = 1;
-  }
-
-  pthread_mutex_unlock(&nacl_fs_mu);
-
-  return 0;
-}
-
-/* Create a new file and return the fd for it.
-   Returns 0 on success. */
-int NaClFile_new(char *pathname) {
-  int fd = imc_mem_obj_create(MMAP_PAGE_SIZE);
-  if (fd < 0) {
-    printerr("nacl_file: imc_mem_obj_create failed %d\n", fd);
-    return -1;
-  }
-  return NaClFile_fd(pathname, fd, 1, 0);
-}
-
-int get_real_fd(int dd) {
-  int fd;
-
-  if (!IsValidDescriptor(dd)) {
-    errno = EBADF;
-    return dd;
-  }
-
-  pthread_mutex_lock(&nacl_files[dd].mu);
-
-  if (NULL == nacl_files[dd].file_ptr) {
-    pthread_mutex_unlock(&nacl_files[dd].mu);
-    errno = EBADF;
-    return dd;
-  }
-
-  pthread_mutex_lock(&nacl_files[dd].file_ptr->mu);
-
-  fd = nacl_files[dd].file_ptr->real_fd;
-
-  pthread_mutex_unlock(&nacl_files[dd].file_ptr->mu);
-  pthread_mutex_unlock(&nacl_files[dd].mu);
-
-  return fd;
-}
-
-/* NOTE: this is very similar to get_real_fd(). TODO(robertm): refactor. */
-int is_reg_file(int dd) {
-  int is_reg = 0;
-
-  if (!IsValidDescriptor(dd)) {
-    errno = EBADF;
-    return -1;
-  }
-
-  pthread_mutex_lock(&nacl_files[dd].mu);
-
-  if (NULL == nacl_files[dd].file_ptr) {
-    pthread_mutex_unlock(&nacl_files[dd].mu);
-    errno = EBADF;
-    return -1;
-  }
-
-  pthread_mutex_lock(&nacl_files[dd].file_ptr->mu);
-
-  is_reg = nacl_files[dd].file_ptr->is_reg_file;
-
-  pthread_mutex_unlock(&nacl_files[dd].file_ptr->mu);
-  pthread_mutex_unlock(&nacl_files[dd].mu);
-
-  return is_reg;
-}
-
-
-int get_real_fd_by_name(const char *pathname) {
-  int fd = -1;
-  struct NaCl_file_map *entry;
-
-  pthread_mutex_lock(&nacl_fs_mu);
-
-  for (entry = nacl_fs; NULL != entry; entry = entry->next) {
-    if (!strcmp(pathname, entry->filename)) {
-      fd = entry->real_fd;
-      break;
+ public:
+  FileInfo(string fn, int fd) :
+    filename_(fn), fd_(fd), size_(-1) {
+    printdbg("DBG: registering file %d (%s)\n", fd, fn.c_str());
+    descriptor_map_[fn] = this;
+    if (fd >= 0) {
+      struct stat stb;
+      int result = fstat(fd_, &stb);
+      if (result != 0) {
+        printerr("ERROR: cannot stat %d (%s)\n", fd, fn.c_str());
+      }
+      size_ = stb.st_size;;
     }
   }
 
-  pthread_mutex_unlock(&nacl_fs_mu);
-
-  if (-1 == fd) {
-    errno = EBADF;
+  int GetSize() {
+    if (fd_ < 0) {
+      printerr("ERROR: file has not been initialized!\n");
+    }
+    return size_;
   }
 
-  return fd;
+  int GetFd() {
+    return fd_;
+  }
+
+  MemoryBuffer* ReadAllDataAsMemoryBuffer() {
+    printdbg("DBG: reading file %d (%s): %d bytes\n",
+             fd_, filename_.c_str(), size_);
+
+    const int count_up = roundToNextPageSize(size_);
+    char *buf = (char *) mmap(NULL,
+                              count_up,
+                              PROT_READ,
+                              MAP_SHARED,
+                              fd_, 0);
+    if (NULL == buf) {
+      printerr("ERROR: mmap call failed!\n");
+      return 0;
+    }
+
+    printdbg("after mapping %p %d\n", buf, size_);
+    // This copies the data into a new buffer
+    MemoryBuffer* mb = MemoryBuffer::getMemBufferCopy(StringRef(buf, size_));
+    munmap(buf, count_up);
+    printdbg("after unmapping %p %d\n",
+             mb->getBufferStart(), mb->getBufferSize());
+    return mb;
+  }
+
+  void WriteAllData(string data) {
+    printdbg("DBG: writing file %d (%s): %d bytes\n",
+             fd_, filename_.c_str(), data.size());
+
+    if (fd_ >= 0) {
+      printerr("ERROR: cannot write file twice\n");
+      return;
+    }
+
+    const int count_up =  roundToNextPageSize(data.size());
+    const int fd = imc_mem_obj_create(count_up);
+    if (fd < 0) {
+      printerr("ERROR: imc_mem_obj_create failed\n");
+    }
+
+    char* buf = (char *) mmap(NULL,
+                              count_up,
+                              PROT_WRITE,
+                              MAP_SHARED,
+                              fd,
+                              0);
+    if (NULL == buf) {
+      printerr("ERROR: cannot map shm for write\n");
+      return;
+    }
+
+    memcpy(buf, data.c_str(), data.size());
+    munmap(buf, count_up);
+    fd_ = fd;
+    size_ = data.size();
+  }
+
+  static FileInfo* FindFileInfo(const string& fn) {
+    map<string, FileInfo*>::iterator it = descriptor_map_.find(fn);
+    if (it == descriptor_map_.end()) {
+      printerr("ERROR: unknown file %s\n", fn.c_str());
+      return NULL;
+    }
+
+    return it->second;
+  }
+};
+
+map<string, FileInfo*> FileInfo::descriptor_map_;
+
+extern int llc_main(int argc, char **argv);
+
+
+MemoryBuffer* NaClGetMemoryBufferForFile(const char* filename) {
+  FileInfo* fi = FileInfo::FindFileInfo(string(filename));
+  return fi->ReadAllDataAsMemoryBuffer();
 }
 
-/* NOTE: this is very similar to get_real_fd_by_name. TODO(robertm): refactor. */
-int get_real_size_by_name(const char *pathname) {
-  size_t real_size = 0;
-  struct NaCl_file_map *entry;
-
-  pthread_mutex_lock(&nacl_fs_mu);
-
-  for (entry = nacl_fs; NULL != entry; entry = entry->next) {
-    if (!strcmp(pathname, entry->filename)) {
-      real_size = entry->real_size;
-      break;
-    }
-  }
-
-  pthread_mutex_unlock(&nacl_fs_mu);
-
-  return real_size;
-}
-
-
-/* Copy at most a page of data between shm (from_fd to to_fd), starting at
-   base_pos for count bytes. */
-static int copy_shm_data(int from_fd, int to_fd, off_t base_pos, size_t count) {
-  void *from_data = mmap(NULL, MMAP_PAGE_SIZE, PROT_READ, MAP_SHARED,
-                         from_fd, base_pos);
-  void *to_data = mmap(NULL, MMAP_PAGE_SIZE, PROT_WRITE, MAP_SHARED,
-                       to_fd, base_pos);
-
-  if (count > MMAP_PAGE_SIZE) {
-    printerr("nacl_file: copy more than MMAP_PAGE_SIZE: %d?\n", count);
-    return -1;
-  }
-
-  if (NULL != from_data && NULL != to_data) {
-    memcpy(to_data, from_data, count);
-    munmap(from_data, MMAP_PAGE_SIZE);
-    munmap(to_data, MMAP_PAGE_SIZE);
-  } else {
-    printerr("nacl_file: mmap call failed!\n");
-    return -1;
-  }
-  return 0;
-}
-
-/* Adjust the size of a nacl file.
-   Changes the real_fd of a file.
-   Returns 0 on success. */
-static int
-adjust_file_size(int dd, size_t new_size) {
-  int new_fd = -1;
-  off_t base_pos;
-  size_t count;
-  size_t final_base;
-  struct NaCl_file_map *entry;
-
-  if (!IsValidDescriptor(dd)) {
-    errno = EBADF;
-    return -1;
-  }
-
-  /* TODO(abetul): check if caller has already acquired the mutex for file */
-
-  if (NULL == nacl_files[dd].file_ptr) {
-    errno = EBADF;
-    return -1;
-  }
-  entry = nacl_files[dd].file_ptr;
-
-  new_fd = imc_mem_obj_create(new_size);
-  if (new_fd < 0) {
-    printerr("nacl_file: imc_mem_obj_create failed %d\n", new_fd);
-    return -1;
-  }
-
-  /* copy contents over -- Beginning with MMAP_PAGE_SIZE chunks. */
-  final_base = entry->size & (~MMAP_ROUND_MASK);
-  for (base_pos = 0; (size_t) base_pos < final_base;
-       base_pos += MMAP_PAGE_SIZE) {
-    if (copy_shm_data(entry->real_fd, new_fd, base_pos, MMAP_PAGE_SIZE)) {
-      printerr("nacl_file: copy_shm_data failed!\n");
-      return -1;
-    }
-  }
-
-  /* Copy the left overs (not a multiple of MMAP_PAGE_SIZE) */
-  count = entry->size - final_base;
-  if (count > 0) {
-    if (copy_shm_data(entry->real_fd, new_fd, base_pos, count)) {
-      printerr("nacl_file: copy_shm_data failed!\n");
-      return -1;
-    }
-  }
-
-  if (__real_close(entry->real_fd) < 0) {
-    printerr("nacl_file: close in size adjust failed!\n");
-    return -1;
-  }
-
-  entry->real_fd = new_fd;
-  entry->size = new_size;
-  /* entry->real_size stays the same, since we haven't written anything new. */
-
-  return 0;
-}
-
-int __wrap_open(const char *pathname, int oflags, ...) {
-  int dd = -1;
-  int i;
-  int mode = 0;
-  va_list ap;
-  struct NaCl_file_map *entry;
-
-  va_start(ap, oflags);
-  if (oflags & O_CREAT) {
-    mode = va_arg(ap, int);
-  }
-
-  for (entry = nacl_fs; NULL != entry; entry = entry->next) {
-    if (!strcmp(pathname, entry->filename)) {
-      break;
-    }
-  }
-
-  if (NULL == entry) {
-    return __real_open(pathname, oflags, mode);
-  }
-
-  for (i = 3; i < MAX_NACL_FILES; i++) {
-    if (NULL == nacl_files[i].file_ptr) {
-      dd = i;
-      break;
-    }
-  }
-
-  if (-1 == dd) {
-    printerr("nacl_file: Max open file count has been reached\n");
-    return -1;
-  }
-
-  pthread_mutex_lock(&nacl_files[dd].mu);
-
-  nacl_files[dd].pos = 0;
-  nacl_files[dd].mode = oflags;
-  nacl_files[dd].file_ptr = entry;
-
-  pthread_mutex_unlock(&nacl_files[dd].mu);
-
-  return dd;
-}
-
-int __wrap_close(int dd) {
-  if (!IsValidDescriptor(dd)) {
-    return __real_close(dd);
-  }
-
-  /* Be careful w/ the test... if !IsValidDescriptor(dd),
-     is_reg_file could return -1 */
-  if (1 == is_reg_file(dd)) {
-    int fd = get_real_fd(dd);
-    return __real_close(fd);
-  }
-
-  pthread_mutex_lock(&nacl_files[dd].mu);
-
-  if (NULL == nacl_files[dd].file_ptr) {
-    pthread_mutex_unlock(&nacl_files[dd].mu);
-    return __real_close(dd);
-  }
-
-  nacl_files[dd].file_ptr = NULL;
-
-  pthread_mutex_unlock(&nacl_files[dd].mu);
-
-  return 0;
-}
-
-int __wrap_read(int dd, void *buf, size_t count) {
-  int got = 0;
-  uint8_t *data;
-  off_t base_pos;
-  off_t adj;
-  size_t count_up;
-
-  if (!IsValidDescriptor(dd)) {
-    return __real_read(dd, buf, count);
-  }
-
- /* Be careful w/ the test... if !IsValidDescriptor(dd),
-    is_reg_file could return -1 */
-  if (1 == is_reg_file(dd)) {
-    int fd = get_real_fd(dd);
-    return __real_read(fd, buf, count);
-  }
-
-  pthread_mutex_lock(&nacl_files[dd].mu);
-
-  if (NULL == nacl_files[dd].file_ptr) {
-    pthread_mutex_unlock(&nacl_files[dd].mu);
-    return __real_read(dd, buf, count);
-  }
-
-  if ((nacl_files[dd].mode & !O_RDONLY) != O_RDONLY) {
-    printerr("nacl_file: invalid mode %d\n", nacl_files[dd].mode);
-    pthread_mutex_unlock(&nacl_files[dd].mu);
-    return -1;
-  }
-
-  pthread_mutex_lock(&nacl_files[dd].file_ptr->mu);
-
-  /* make sure we don't read beyond end of file */
-  if ((nacl_files[dd].pos + count) > nacl_files[dd].file_ptr->size) {
-    if ((nacl_files[dd].file_ptr->size - nacl_files[dd].pos) < 0)
-      count = 0;
-    else
-      count = nacl_files[dd].file_ptr->size - nacl_files[dd].pos;
-    printerr("nacl_file: warning, attempting read outside of file!\n");
-  }
-
-  /* use mmap to read data */
-  base_pos = nacl_files[dd].pos & (~(MMAP_ROUND_MASK));
-  adj = nacl_files[dd].pos - base_pos;
-  /* round count value to next 64KB */
-  count_up = roundToNextPageSize(count + adj);
-  data = (uint8_t *) mmap(NULL, count_up, PROT_READ, MAP_SHARED,
-                         nacl_files[dd].file_ptr->real_fd, base_pos);
-  if (NULL != data) {
-    memcpy(buf, data + adj, count);
-    munmap(data, count_up);
-    got = count;
-  } else {
-    printerr("nacl_file: mmap call failed!\n");
-  }
-
-  if (got > 0) {
-    nacl_files[dd].pos += got;
-  }
-
-  pthread_mutex_unlock(&nacl_files[dd].file_ptr->mu);
-  pthread_mutex_unlock(&nacl_files[dd].mu);
-
-  return got;
-}
-
-/* Update the file position after a write */
-static void nacl_file_update_pos(struct NaCl_file *nf, off_t pos) {
-  nf->pos = pos;
-  /* Update the real_size of the file, if we've written further in */
-  if (nf->file_ptr) {
-    nf->file_ptr->real_size = pos > nf->file_ptr->real_size ?
-        pos : nf->file_ptr->real_size;
-  }
-}
-
-
-int __wrap_write(int dd, const void *buf, size_t count) {
-  int got = 0;
-  uint8_t *data;
-  off_t base_pos;
-  off_t adj;
-  size_t count_up;
-  size_t new_size;
-
-  if (!IsValidDescriptor(dd)) {
-    return __real_write(dd, buf, count);
-  }
-
- /* Be careful w/ the test... if !IsValidDescriptor(dd),
-    is_reg_file could return -1 */
-  if (1 == is_reg_file(dd)) {
-    int fd = get_real_fd(dd);
-    return __real_write(fd, buf, count);
-  }
-
-  pthread_mutex_lock(&nacl_files[dd].mu);
-
-  if (NULL == nacl_files[dd].file_ptr) {
-    pthread_mutex_unlock(&nacl_files[dd].mu);
-    return __real_write(dd, buf, count);
-  }
-
-  if ((nacl_files[dd].mode & (O_WRONLY | O_RDWR)) == 0) {
-    printerr("nacl_file: invalid mode %d\n", nacl_files[dd].mode);
-    pthread_mutex_unlock(&nacl_files[dd].mu);
-    return -1;
-  }
-
-  pthread_mutex_lock(&nacl_files[dd].file_ptr->mu);
-
-  /* adjust file size if writing past the current end */
-  new_size = nacl_files[dd].file_ptr->size;
-  while ((nacl_files[dd].pos + count) > new_size) {
-    /* double the file size */
-    new_size <<= 1;
-  }
-
-  if (new_size > nacl_files[dd].file_ptr->size) {
-    if (adjust_file_size(dd, new_size) != 0) {
-      pthread_mutex_unlock(&nacl_files[dd].file_ptr->mu);
-      pthread_mutex_unlock(&nacl_files[dd].mu);
-      printerr("nacl_file: failed to adjust file size %d\n", dd);
-      return -1;
-    }
-  }
-
-  /* use mmap to write data */
-  base_pos = nacl_files[dd].pos & (~(MMAP_ROUND_MASK));
-  adj = nacl_files[dd].pos - base_pos;
-  /* round count value to next 64KB */
-  count_up = roundToNextPageSize(count + adj);
-  data = (uint8_t *) mmap(NULL, count_up, PROT_WRITE, MAP_SHARED,
-                         nacl_files[dd].file_ptr->real_fd, base_pos);
-  if (NULL != data) {
-    memcpy(data + adj, buf, count);
-    munmap(data, count_up);
-    got = count;
-  } else {
-    printerr("nacl_file: mmap call failed!\n");
-  }
-
-  if (got > 0) {
-    nacl_file_update_pos(&nacl_files[dd], nacl_files[dd].pos + got);
-  }
-
-  pthread_mutex_unlock(&nacl_files[dd].file_ptr->mu);
-  pthread_mutex_unlock(&nacl_files[dd].mu);
-  return got;
-}
-
-off_t __wrap_lseek(int dd, off_t offset, int whence) {
-
-  if (!IsValidDescriptor(dd)) {
-    return __real_lseek(dd, offset, whence);
-  }
-
- /* Be careful w/ the test... if !IsValidDescriptor(dd),
-    is_reg_file could return -1 */
-  if (1 == is_reg_file(dd)) {
-    int fd = get_real_fd(dd);
-    return __real_lseek(fd, offset, whence);
-  }
-
-  pthread_mutex_lock(&nacl_files[dd].mu);
-
-  if (NULL == nacl_files[dd].file_ptr) {
-    pthread_mutex_unlock(&nacl_files[dd].mu);
-    return __real_lseek(dd, offset, whence);
-  }
-
-  pthread_mutex_lock(&nacl_files[dd].file_ptr->mu);
-
-  switch (whence) {
-    case SEEK_SET:
-      break;
-    case SEEK_CUR:
-      offset = nacl_files[dd].pos + offset;
-      break;
-    case SEEK_END:
-      offset = nacl_files[dd].file_ptr->size + offset;
-      break;
-  }
-  if (offset < 0) {
-    offset = -1;
-  }
-  if (-1 != offset) {
-    nacl_files[dd].pos = offset;
-  }
-
-  pthread_mutex_unlock(&nacl_files[dd].file_ptr->mu);
-  pthread_mutex_unlock(&nacl_files[dd].mu);
-
-  return offset;
+void NaClOutputStringToFile(const char* filename, const string& data) {
+  FileInfo* fi = FileInfo::FindFileInfo(filename);
+  fi->WriteAllData(data);
 }
 
 #define MAX_LLC_ARGS 256
@@ -662,18 +211,22 @@
   /* Input bitcode file. This is supplied by urlAsNaClDesc,
    * which should get the right size from fstat(). */
   int bitcode_fd = in_args[0]->u.hval;
-  NaClFile_fd("bitcode_combined", bitcode_fd, 0, 0);
 
-  /* Define output file. */
-  NaClFile_new("obj_combined");
+  // input file (side effect is to register the file)
+  new FileInfo("bitcode_combined", bitcode_fd);
+
+  // NOTE: we bypass the output file name mangling in llc.cpp
+  //       so the output name does not get the ".o" suffix
+  FileInfo* output_file = new FileInfo("obj_combined", -1);
+
 
   /* Call main. */
   llc_main(llc_argc, llc_argv);
   reset_arg_array();
 
   /* Save obj fd for return. */
-  out_args[0]->u.hval = get_real_fd_by_name("obj_combined");
-  out_args[1]->u.ival = get_real_size_by_name("obj_combined");
+  out_args[0]->u.hval = output_file->GetFd();
+  out_args[1]->u.ival = output_file->GetSize();
 
   rpc->result = NACL_SRPC_RESULT_OK;
   done->Run(done);
