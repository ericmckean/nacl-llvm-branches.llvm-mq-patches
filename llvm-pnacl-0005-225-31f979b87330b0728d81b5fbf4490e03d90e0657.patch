# HG changeset patch
# User robertm@google.com
# Date 1298415562 18000
# Branch pnacl-sfi
# Node ID 31f979b87330b0728d81b5fbf4490e03d90e0657
# Parent 80b478a37ace73c5cd6486b6d094381975052b21
Add flag for changing x86 mask

http://codereview.chromium.org/6469099/

 From llvm-pnacl-0005-225-31f979b87330b0728d81b5fbf4490e03d90e0657.patch

 From .hg/patches/llvm-pnacl-0005-225-31f979b87330b0728d81b5fbf4490e03d90e0657.patch.stripped

diff -r 80b478a37ace lib/Target/X86/X86InstrNaCl.cpp
--- a/lib/Target/X86/X86InstrNaCl.cpp	Fri Feb 18 12:34:39 2011 -0800
+++ b/lib/Target/X86/X86InstrNaCl.cpp	Tue Aug 09 14:44:46 2011 -0700
@@ -20,6 +20,11 @@
 
 using namespace llvm;
 
+// This option makes it possible to overwrite the x86 jmp mask immediate.
+// Setting it to -1 will effectively turn masking into a nop which will
+// help with linking this code with non-sandboxed libs (at least for x86-32).
+cl::opt<int> FlagSfiX86JmpMask("sfi-x86-jmp-mask", cl::init(-32));
+
 static unsigned PrefixSaved = 0;
 static bool PrefixPass = false;
 
@@ -45,8 +50,9 @@
 
 static void EmitIndirectBranch(const MCOperand &Op, bool Is64Bit, bool IsCall,
                                MCStreamer &Out) {
-  unsigned Reg32 = Op.getReg();
-  unsigned Reg64 = getX86SubSuperRegister(Reg32, MVT::i64);
+  const int JmpMask = FlagSfiX86JmpMask;
+  const unsigned Reg32 = Op.getReg();
+  const unsigned Reg64 = getX86SubSuperRegister(Reg32, MVT::i64);
 
   if (IsCall)
     Out.EmitBundleAlignEnd();
@@ -57,7 +63,7 @@
   ANDInst.setOpcode(X86::AND32ri8);
   ANDInst.addOperand(MCOperand::CreateReg(Reg32));
   ANDInst.addOperand(MCOperand::CreateReg(Reg32));
-  ANDInst.addOperand(MCOperand::CreateImm(-32));
+  ANDInst.addOperand(MCOperand::CreateImm(JmpMask));
   Out.EmitInstruction(ANDInst);
 
   if (Is64Bit) {
