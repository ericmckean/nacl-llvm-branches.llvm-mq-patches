# HG changeset patch
# User Jason Kim <jasonwkim@google.com>
# Date 1298504194 28800
# Branch pnacl-sfi
# Node ID 7c6c8e9e9c3be23d13089020f44ee9f12f8a4f4e
# Parent f9c26b96b58f53c8e211b013825992c0cb91058f
http://llvm.org/viewvc/llvm-project?view=rev&revision=124895

From Upstream, for ARM/MC/ELF:
Teach ARM/MC/ELF to handle R_ARM_JUMP24 relocation type for conditional jumps.
(yes, this is different from R_ARM_CALL)

- Adds a new method getARMBranchTargetOpValue() which handles the
necessary distinction between the conditional and unconditional br/bl
needed for ARM/ELF

At least for ARM mode, the needed fixup for conditional versus unconditional
br/bl is identical, but the ARM docs and existing ARM tools expect this
reloc type...

Added a few FIXME's for future naming fixups in ARMInstrInfo.td

 From llvm-pnacl-0007-227-7c6c8e9e9c3be23d13089020f44ee9f12f8a4f4e.patch

 From .hg/patches/llvm-pnacl-0007-227-7c6c8e9e9c3be23d13089020f44ee9f12f8a4f4e.patch.stripped

diff -r f9c26b96b58f llvm-trunk/lib/MC/ELFObjectWriter.cpp
--- a/llvm-trunk/lib/MC/ELFObjectWriter.cpp	Wed Feb 23 15:36:34 2011 -0800
+++ b/llvm-trunk/lib/MC/ELFObjectWriter.cpp	Thu Jun 09 15:35:46 2011 -0700
@@ -1616,6 +1616,9 @@
     case ARM::fixup_arm_condbranch:
       Type = ELF::R_ARM_JUMP24;
       break;
+    case ARM::fixup_arm_condbranch:
+      Type = ELF::R_ARM_JUMP24;
+      break;
     case ARM::fixup_arm_movt_hi16:
     case ARM::fixup_arm_movt_hi16_pcrel:
       Type = ELF::R_ARM_MOVT_PREL;
@@ -1674,6 +1677,9 @@
     case ARM::fixup_arm_condbranch:
       Type = ELF::R_ARM_JUMP24;
       break;
+    case ARM::fixup_arm_condbranch:
+      Type = ELF::R_ARM_JUMP24;
+      break;
     case ARM::fixup_arm_movt_hi16:
       Type = ELF::R_ARM_MOVT_ABS;
       break;
diff -r f9c26b96b58f llvm-trunk/lib/Target/ARM/ARMMCCodeEmitter.cpp
--- a/llvm-trunk/lib/Target/ARM/ARMMCCodeEmitter.cpp	Wed Feb 23 15:36:34 2011 -0800
+++ b/llvm-trunk/lib/Target/ARM/ARMMCCodeEmitter.cpp	Thu Jun 09 15:35:46 2011 -0700
@@ -113,6 +113,10 @@
   uint32_t getT2AdrLabelOpValue(const MCInst &MI, unsigned OpIdx,
                               SmallVectorImpl<MCFixup> &Fixups) const;
   
+  /// getARMBranchTargetOpValue - Return encoding info for 24-bit immediate
+  /// branch target.
+  uint32_t getARMBranchTargetOpValue(const MCInst &MI, unsigned OpIdx,
+                                     SmallVectorImpl<MCFixup> &Fixups) const;
 
   /// getAddrModeImm12OpValue - Return encoding info for 'reg +/- imm12'
   /// operand.
@@ -494,6 +498,23 @@
   return false;
 }
 
+/// Return true if this branch has a non-always predication
+static bool HasConditionalBranch(const MCInst &MI) {
+  int NumOp = MI.getNumOperands();
+  if (NumOp >= 2) {
+    for (int i = 0; i < NumOp-1; ++i) {
+      const MCOperand &MCOp1 = MI.getOperand(i);
+      const MCOperand &MCOp2 = MI.getOperand(i + 1);
+      if (MCOp1.isImm() && MCOp2.isReg() && 
+          (MCOp2.getReg() == 0 || MCOp2.getReg() == ARM::CPSR)) {
+        if (ARMCC::CondCodes(MCOp1.getImm()) != ARMCC::AL) 
+          return true;
+      }
+    }
+  }
+  return false;
+}
+
 /// getBranchTargetOpValue - Return encoding info for 24-bit immediate branch
 /// target.
 uint32_t ARMMCCodeEmitter::
diff -r f9c26b96b58f llvm-trunk/utils/TableGen/EDEmitter.cpp
--- a/llvm-trunk/utils/TableGen/EDEmitter.cpp	Wed Feb 23 15:36:34 2011 -0800
+++ b/llvm-trunk/utils/TableGen/EDEmitter.cpp	Thu Jun 09 15:35:46 2011 -0700
@@ -653,6 +653,9 @@
   MISC("t_addrmode_sp", "kOperandTypeThumbAddrModeSP");           // R, I
   MISC("t_addrmode_pc", "kOperandTypeThumbAddrModePC");           // R, I
 
+  // all I, ARM mode only, conditional/unconditional
+  PCR("br_target");
+  PCR("bl_target");
   return 1;
 }
 
