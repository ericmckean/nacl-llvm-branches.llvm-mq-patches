# HG changeset patch
# User David Meyer <pdox@google.com>
# Date 1297191921 28800
# Branch pnacl-sfi
# Node ID 04eba3102bd02843be19d597dd4cf2a52f1087eb
# Parent 98d25e0ea7989cc6ee8822441af97d34f8e7e3a0
Sandbox arbitrary moves to RBP

 From llvm-pnacl-0001-221-04eba3102bd02843be19d597dd4cf2a52f1087eb.patch

 From .hg/patches/llvm-pnacl-0001-221-04eba3102bd02843be19d597dd4cf2a52f1087eb.patch.stripped

diff -r 98d25e0ea798 lib/Target/X86/X86NaClRewritePass.cpp
--- a/lib/Target/X86/X86NaClRewritePass.cpp	Thu Jul 21 00:00:00 2011 -0700
+++ b/lib/Target/X86/X86NaClRewritePass.cpp	Wed Jul 27 11:11:05 2011 -0700
@@ -296,12 +296,41 @@
     return false;
 
   unsigned Opc = MI.getOpcode();
+  DebugLoc DL = MI.getDebugLoc();
 
-  // MOV RBP, RSP is safe
+  // Handle moves to RBP
   if (Opc == X86::MOV64rr) {
     assert(MI.getOperand(0).getReg() == X86::RBP);
-    assert(MI.getOperand(1).getReg() == X86::RSP);
-    return false;
+    unsigned SrcReg = MI.getOperand(1).getReg();
+
+    // MOV RBP, RSP is already safe
+    if (SrcReg == X86::RSP)
+      return false;
+
+    // Rewrite: mov %rbp, %rX
+    // To:      naclrestbp %eX, %r15
+    BuildMI(MBB, MBBI, DL, TII->get(X86::NACL_RESTBPr))
+      .addReg(DemoteRegTo32(SrcReg))
+      .addReg(X86::R15);
+    MI.eraseFromParent();
+    return true;
+  }
+
+  // Handle memory moves to RBP
+  if (Opc == X86::MOV64rm) {
+    assert(MI.getOperand(0).getReg() == X86::RBP);
+
+    // Rewrite: mov %rbp, (...)
+    // To:      naclrestbp (...), %r15
+    BuildMI(MBB, MBBI, DL, TII->get(X86::NACL_RESTBPm))
+      .addOperand(MI.getOperand(1))  // Base
+      .addOperand(MI.getOperand(2))  // Scale
+      .addOperand(MI.getOperand(3))  // Index
+      .addOperand(MI.getOperand(4))  // Offset
+      .addOperand(MI.getOperand(5))  // Segment
+      .addReg(X86::R15); // rZP
+    MI.eraseFromParent();
+    return true;
   }
 
   // Popping onto RBP
@@ -317,7 +346,6 @@
   //   .bundle_unlock
   if (Opc == X86::POP64r) {
     assert(MI.getOperand(0).getReg() == X86::RBP);
-    DebugLoc DL = MI.getDebugLoc();
 
     BuildMI(MBB, MBBI, DL, TII->get(X86::NACL_RESTBPm))
       .addReg(X86::RSP)  // Base
